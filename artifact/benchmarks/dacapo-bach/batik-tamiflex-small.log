Array.newInstance;byte[];sun.text.bidi.BidiBase.getMemory;1130;;
Array.newInstance;char[];sun.invoke.util.BytecodeDescriptor.parseSig;90;;
Array.newInstance;int[];sun.invoke.util.BytecodeDescriptor.parseSig;90;;
Array.newInstance;java.lang.Class[];java.util.AbstractCollection.toArray;179;;
Array.newInstance;java.lang.Class[];java.util.Arrays.copyOf;3212;;
Array.newInstance;java.lang.Class[];java.util.Arrays.copyOfRange;3484;;
Array.newInstance;java.lang.Class[];sun.invoke.util.BytecodeDescriptor.parseSig;90;;
Array.newInstance;java.lang.Object[];sun.invoke.util.BytecodeDescriptor.parseSig;90;;
Array.newInstance;java.lang.String[];java.util.AbstractCollection.toArray;179;;
Array.newInstance;java.lang.String[];java.util.Arrays.copyOf;3212;;
Array.newInstance;java.lang.invoke.LambdaForm$BasicType[];java.util.Arrays.copyOf;3212;;
Array.newInstance;java.lang.invoke.LambdaForm$BasicType[];sun.invoke.util.BytecodeDescriptor.parseSig;90;;
Array.newInstance;java.lang.invoke.LambdaForm$Name[];java.util.Arrays.copyOf;3212;;
Array.newInstance;java.lang.invoke.LambdaForm$Name[];sun.invoke.util.BytecodeDescriptor.parseSig;90;;
Array.newInstance;java.lang.invoke.MethodHandle[];java.util.Arrays.copyOf;3212;;
Array.newInstance;sun.font.PhysicalFont[];java.util.concurrent.ConcurrentHashMap$CollectionView.toArray;4440;;
Array.newInstance;sun.java2d.loops.GraphicsPrimitive[];java.util.TimSort.<init>;157;;
Array.newInstance;sun.java2d.loops.GraphicsPrimitive[];java.util.TimSort.ensureCapacity;934;;
Array.newInstance;sun.security.jca.ProviderConfig[];java.util.Arrays.copyOf;3212;;
Class.forName;java.awt.font.TextAttribute;sun.text.bidi.BidiBase$TextAttributeConstants.getClass;3471;;
Class.forName;java.net.Inet6AddressImpl;java.net.InetAddress.loadImpl;1550;;
Class.forName;java.nio.DirectByteBufferR;sun.nio.ch.Util$5.run;430;;
Class.forName;java.security.MessageDigestSpi;java.security.Security.getSpiClass;675;;
Class.forName;java.util.logging.LoggingProxyImpl;sun.util.logging.LoggingSupport$1.run;54;;
Class.forName;org.apache.batik.apps.rasterizer.Main;org.dacapo.harness.Batik.<init>;29;;
Class.forName;org.apache.batik.css.parser.Parser;org.apache.batik.dom.ExtensibleDOMImplementation.createCSSEngine;172;;
Class.forName;org.apache.batik.ext.awt.image.codec.png.PNGTranscoderInternalCodecWriteAdapter;org.apache.batik.transcoder.image.PNGTranscoder.getWriteAdapter;65;;
Class.forName;org.apache.crimson.parser.Parser2;org.apache.crimson.parser.Parser2$Catalog.class$;3306;;
Class.forName;org.dacapo.harness.Batik;org.dacapo.harness.TestHarness.findClass;281;;
Class.forName;sun.awt.X11FontManager;sun.font.FontManagerFactory$1.run;82;;
Class.forName;sun.awt.X11GraphicsEnvironment;java.awt.GraphicsEnvironment.createGE;103;;
Class.forName;sun.dc.DuctusRenderingEngine;sun.java2d.pipe.RenderingEngine$1.run;128;;
Class.forName;sun.font.T2KFontScaler;sun.font.FontScaler.<clinit>;100;;
Class.forName;sun.net.www.protocol.jar.Handler;java.net.URL.getURLStreamHandler;1175;;
Class.forName;sun.security.provider.SHA;java.security.Provider$Service.getImplClass;1634;;
Class.forName;sun.util.logging.PlatformLogger$DefaultLoggerProxy;sun.util.logging.PlatformLogger.<clinit>;173;;
Class.forName;sun.util.logging.PlatformLogger$JavaLoggerProxy;sun.util.logging.PlatformLogger.<clinit>;176;;
Class.getDeclaredField;<java.lang.invoke.BoundMethodHandle$Species_L3: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;java.lang.invoke.BoundMethodHandle$Factory.setSpeciesDataToConcreteBMHClass;790;isAccessible=false;
Class.getDeclaredField;<java.lang.invoke.BoundMethodHandle$Species_L4: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;java.lang.invoke.BoundMethodHandle$Factory.setSpeciesDataToConcreteBMHClass;790;isAccessible=false;
Class.getDeclaredField;<java.lang.invoke.BoundMethodHandle$Species_LL: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;java.lang.invoke.BoundMethodHandle$Factory.setSpeciesDataToConcreteBMHClass;790;isAccessible=false;
Class.getDeclaredField;<java.lang.invoke.CallSite: java.lang.invoke.MethodHandle target>;java.lang.invoke.CallSite.<clinit>;252;isAccessible=false;
Class.getDeclaredField;<java.lang.invoke.MethodHandle: java.lang.invoke.LambdaForm form>;java.lang.invoke.MethodHandle.<clinit>;1451;isAccessible=false;
Class.getDeclaredField;<java.lang.invoke.MethodType: java.lang.Class rtype>;java.lang.invoke.MethodType.<clinit>;1184;isAccessible=false;
Class.getDeclaredField;<java.lang.invoke.MethodType: java.lang.Class[] ptypes>;java.lang.invoke.MethodType.<clinit>;1186;isAccessible=false;
Class.getDeclaredField;<java.net.Inet6Address: java.net.Inet6Address$Inet6AddressHolder holder6>;java.net.Inet6Address.<clinit>;585;isAccessible=false;
Class.getDeclaredField;<java.net.InetAddress: java.net.InetAddress$InetAddressHolder holder>;java.net.InetAddress.<clinit>;1590;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.CopyOnWriteArrayList: java.util.concurrent.locks.ReentrantLock lock>;java.util.concurrent.CopyOnWriteArrayList.<clinit>;1681;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.atomic.AtomicBoolean: int value>;java.util.concurrent.atomic.AtomicBoolean.<clinit>;59;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.atomic.AtomicMarkableReference: java.util.concurrent.atomic.AtomicMarkableReference$Pair pair>;java.util.concurrent.atomic.AtomicMarkableReference.objectFieldOffset;204;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int waitStatus>;java.util.concurrent.locks.AbstractQueuedSynchronizer.<clinit>;2276;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node next>;java.util.concurrent.locks.AbstractQueuedSynchronizer.<clinit>;2278;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.locks.AbstractQueuedSynchronizer: int state>;java.util.concurrent.locks.AbstractQueuedSynchronizer.<clinit>;2270;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node head>;java.util.concurrent.locks.AbstractQueuedSynchronizer.<clinit>;2272;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node tail>;java.util.concurrent.locks.AbstractQueuedSynchronizer.<clinit>;2274;isAccessible=false;
Class.getDeclaredField;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;sun.util.logging.LoggingSupport$1.run;55;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.DelegatingMethodHandle: java.lang.invoke.MethodHandle getTarget()>;java.lang.invoke.DelegatingMethodHandle.<clinit>;159;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.DirectMethodHandle: java.lang.Object allocateInstance(java.lang.Object)>;java.lang.invoke.DirectMethodHandle$Lazy.<clinit>;681;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.DirectMethodHandle: java.lang.Object checkBase(java.lang.Object)>;java.lang.invoke.DirectMethodHandle$Lazy.<clinit>;673;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.DirectMethodHandle: java.lang.Object checkCast(java.lang.Object,java.lang.Object)>;java.lang.invoke.DirectMethodHandle$Lazy.<clinit>;679;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.DirectMethodHandle: java.lang.Object constructorMethod(java.lang.Object)>;java.lang.invoke.DirectMethodHandle$Lazy.<clinit>;683;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.DirectMethodHandle: java.lang.Object internalMemberName(java.lang.Object)>;java.lang.invoke.DirectMethodHandle$Lazy.<clinit>;665;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.DirectMethodHandle: java.lang.Object internalMemberNameEnsureInit(java.lang.Object)>;java.lang.invoke.DirectMethodHandle$Lazy.<clinit>;667;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.DirectMethodHandle: java.lang.Object staticBase(java.lang.Object)>;java.lang.invoke.DirectMethodHandle$Lazy.<clinit>;675;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.DirectMethodHandle: long fieldOffset(java.lang.Object)>;java.lang.invoke.DirectMethodHandle$Lazy.<clinit>;671;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.DirectMethodHandle: long staticOffset(java.lang.Object)>;java.lang.invoke.DirectMethodHandle$Lazy.<clinit>;677;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.DirectMethodHandle: void ensureInitialized(java.lang.Object)>;java.lang.invoke.DirectMethodHandle$Lazy.<clinit>;669;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.Invokers: java.lang.Object checkGenericType(java.lang.Object,java.lang.Object)>;java.lang.invoke.Invokers.<clinit>;425;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.Invokers: java.lang.Object getCallSiteTarget(java.lang.Object)>;java.lang.invoke.Invokers.<clinit>;427;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.Invokers: void checkCustomized(java.lang.Object)>;java.lang.invoke.Invokers.<clinit>;429;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.Invokers: void checkExactType(java.lang.Object,java.lang.Object)>;java.lang.invoke.Invokers.<clinit>;423;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.MethodHandleImpl: boolean profileBoolean(boolean,int[])>;java.lang.invoke.MethodHandleImpl$Lazy.<clinit>;618;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.MethodHandleImpl: java.lang.Object guardWithCatch(java.lang.invoke.MethodHandle,java.lang.Class,java.lang.invoke.MethodHandle,java.lang.Object[])>;java.lang.invoke.MethodHandleImpl$Lazy.<clinit>;615;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.MethodHandleImpl: sun.invoke.empty.Empty throwException(java.lang.Throwable)>;java.lang.invoke.MethodHandleImpl$Lazy.<clinit>;617;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.MethodHandleImpl: void checkSpreadArgument(java.lang.Object,int)>;java.lang.invoke.MethodHandleImpl$Lazy.<clinit>;614;isAccessible=false;
Class.getField;<java.awt.font.TextAttribute: java.awt.font.TextAttribute BIDI_EMBEDDING>;sun.text.bidi.BidiBase$TextAttributeConstants.getStaticField;3479;isAccessible=false;
Class.getField;<java.awt.font.TextAttribute: java.awt.font.TextAttribute NUMERIC_SHAPING>;sun.text.bidi.BidiBase$TextAttributeConstants.getStaticField;3479;isAccessible=false;
Class.getField;<java.awt.font.TextAttribute: java.awt.font.TextAttribute RUN_DIRECTION>;sun.text.bidi.BidiBase$TextAttributeConstants.getStaticField;3479;isAccessible=false;
Class.getField;<java.awt.font.TextAttribute: java.lang.Boolean RUN_DIRECTION_LTR>;sun.text.bidi.BidiBase$TextAttributeConstants.getStaticField;3479;isAccessible=false;
Class.getMethod;<Harness: void main(java.lang.String[])>;sun.launcher.LauncherHelper.validateMainClass;544;isAccessible=false;
Class.getMethod;<org.apache.batik.apps.rasterizer.Main: void execute()>;org.dacapo.harness.Batik.<init>;30;isAccessible=false;
Class.getMethod;<sun.font.EAttribute: sun.font.EAttribute[] values()>;java.lang.Class.getEnumConstantsShared;;isAccessible=false;
Class.newInstance;java.net.Inet6AddressImpl;java.net.InetAddress.loadImpl;1550;;
Class.newInstance;org.apache.batik.css.parser.Parser;org.apache.batik.dom.ExtensibleDOMImplementation.createCSSEngine;172;;
Class.newInstance;org.apache.batik.ext.awt.image.codec.png.PNGTranscoderInternalCodecWriteAdapter;org.apache.batik.transcoder.image.PNGTranscoder.getWriteAdapter;66;;
Class.newInstance;org.apache.batik.extension.svg.BatikBridgeExtension;org.apache.batik.util.Service.providers;123;;
Class.newInstance;org.apache.batik.extension.svg.BatikDomExtension;org.apache.batik.util.Service.providers;123;;
Class.newInstance;org.apache.batik.script.rhino.RhinoInterpreterFactory;org.apache.batik.util.Service.providers;123;;
Class.newInstance;org.apache.crimson.jaxp.SAXParserFactoryImpl;javax.xml.parsers.FactoryFinder.newInstance;;;
Class.newInstance;sun.awt.X11FontManager;sun.font.FontManagerFactory$1.run;83;;
Class.newInstance;sun.awt.X11GraphicsEnvironment;java.awt.GraphicsEnvironment.createGE;110;;
Class.newInstance;sun.awt.resources.awt;java.util.ResourceBundle$Control.newBundle;2645;;
Class.newInstance;sun.dc.DuctusRenderingEngine;sun.java2d.pipe.RenderingEngine$1.run;129;;
Class.newInstance;sun.net.www.protocol.jar.Handler;java.net.URL.getURLStreamHandler;1184;;
Class.newInstance;sun.reflect.GeneratedConstructorAccessor1;sun.reflect.MethodAccessorGenerator$1.run;403;;
Class.newInstance;sun.security.provider.Sun;sun.security.jca.ProviderConfig$2.run;221;;
Class.newInstance;sun.text.resources.FormatData;java.util.ResourceBundle$Control.newBundle;2645;;
Class.newInstance;sun.text.resources.en.FormatData_en;java.util.ResourceBundle$Control.newBundle;2645;;
Class.newInstance;sun.text.resources.en.FormatData_en_US;java.util.ResourceBundle$Control.newBundle;2645;;
Class.newInstance;sun.util.logging.resources.logging;java.util.ResourceBundle$Control.newBundle;2645;;
Class.newInstance;sun.util.resources.CurrencyNames;java.util.ResourceBundle$Control.newBundle;2645;;
Class.newInstance;sun.util.resources.en.CurrencyNames_en_US;java.util.ResourceBundle$Control.newBundle;2645;;
Constructor.getModifiers;<java.net.Inet6AddressImpl: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<java.nio.DirectByteBufferR: void <init>(int,long,java.io.FileDescriptor,java.lang.Runnable)>;sun.reflect.NativeConstructorAccessorImpl.newInstance;58;isAccessible=true;
Constructor.getModifiers;<org.apache.batik.css.parser.Parser: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.batik.ext.awt.image.codec.png.PNGTranscoderInternalCodecWriteAdapter: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.batik.extension.svg.BatikBridgeExtension: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.batik.extension.svg.BatikDomExtension: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.batik.script.rhino.RhinoInterpreterFactory: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.crimson.jaxp.SAXParserFactoryImpl: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.awt.X11FontManager: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.awt.X11GraphicsEnvironment: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.awt.resources.awt: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.dc.DuctusRenderingEngine: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.net.www.protocol.jar.Handler: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedConstructorAccessor1: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.security.provider.Sun: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.text.resources.FormatData: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.text.resources.en.FormatData_en: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.text.resources.en.FormatData_en_US: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.util.logging.resources.logging: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.util.resources.CurrencyNames: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.util.resources.en.CurrencyNames_en_US: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<java.awt.GraphicsEnvironment$$Lambda$1.94264799: void <init>()>;java.lang.invoke.InnerClassLambdaMetafactory.buildCallSite;215;isAccessible=true;
Constructor.newInstance;<java.net.Inet6AddressImpl: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<java.nio.DirectByteBufferR: void <init>(int,long,java.io.FileDescriptor,java.lang.Runnable)>;sun.nio.ch.Util.newMappedByteBufferR;456;isAccessible=true;
Constructor.newInstance;<org.apache.batik.apps.rasterizer.Main: void <init>(java.lang.String[])>;org.dacapo.harness.Batik.iterate;62;isAccessible=false;
Constructor.newInstance;<org.apache.batik.css.parser.Parser: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.batik.ext.awt.image.codec.png.PNGTranscoderInternalCodecWriteAdapter: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.batik.extension.svg.BatikBridgeExtension: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.batik.extension.svg.BatikDomExtension: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.batik.script.rhino.RhinoInterpreterFactory: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.crimson.jaxp.SAXParserFactoryImpl: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.dacapo.harness.Batik: void <init>(org.dacapo.parser.Config,java.io.File)>;org.dacapo.harness.TestHarness.runBenchmark;211;isAccessible=false;
Constructor.newInstance;<sun.awt.X11FontManager: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.awt.X11GraphicsEnvironment: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.awt.resources.awt: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.dc.DuctusRenderingEngine: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.font.T2KFontScaler: void <init>(sun.font.Font2D,int,boolean,int)>;sun.font.FontScaler.getScaler;128;isAccessible=false;
Constructor.newInstance;<sun.java2d.Disposer$$Lambda$2.283717519: void <init>()>;java.lang.invoke.InnerClassLambdaMetafactory.buildCallSite;215;isAccessible=true;
Constructor.newInstance;<sun.net.www.protocol.jar.Handler: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedConstructorAccessor1: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.security.provider.SHA: void <init>()>;java.security.Provider$Service.newInstance;1595;isAccessible=false;
Constructor.newInstance;<sun.security.provider.Sun: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.text.resources.FormatData: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.text.resources.en.FormatData_en: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.text.resources.en.FormatData_en_US: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.util.logging.resources.logging: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.util.resources.CurrencyNames: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.util.resources.en.CurrencyNames_en_US: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Field.get*;<java.awt.font.TextAttribute: java.awt.font.TextAttribute BIDI_EMBEDDING>;sun.text.bidi.BidiBase$TextAttributeConstants.getStaticField;3480;isAccessible=false;
Field.get*;<java.awt.font.TextAttribute: java.awt.font.TextAttribute NUMERIC_SHAPING>;sun.text.bidi.BidiBase$TextAttributeConstants.getStaticField;3480;isAccessible=false;
Field.get*;<java.awt.font.TextAttribute: java.awt.font.TextAttribute RUN_DIRECTION>;sun.text.bidi.BidiBase$TextAttributeConstants.getStaticField;3480;isAccessible=false;
Field.get*;<java.awt.font.TextAttribute: java.lang.Boolean RUN_DIRECTION_LTR>;sun.text.bidi.BidiBase$TextAttributeConstants.getStaticField;3480;isAccessible=false;
Field.get*;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;sun.util.logging.LoggingSupport$1.run;57;isAccessible=true;
Field.getDeclaringClass;<java.awt.font.TextAttribute: java.awt.font.TextAttribute BIDI_EMBEDDING>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;43;isAccessible=false;
Field.getDeclaringClass;<java.awt.font.TextAttribute: java.awt.font.TextAttribute NUMERIC_SHAPING>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;43;isAccessible=false;
Field.getDeclaringClass;<java.awt.font.TextAttribute: java.awt.font.TextAttribute RUN_DIRECTION>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;43;isAccessible=false;
Field.getDeclaringClass;<java.awt.font.TextAttribute: java.lang.Boolean RUN_DIRECTION_LTR>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;43;isAccessible=false;
Field.getDeclaringClass;<java.lang.invoke.BoundMethodHandle$Species_L3: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;43;isAccessible=false;
Field.getDeclaringClass;<java.lang.invoke.BoundMethodHandle$Species_L4: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;43;isAccessible=false;
Field.getDeclaringClass;<java.lang.invoke.BoundMethodHandle$Species_LL: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;43;isAccessible=false;
Field.getDeclaringClass;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;43;isAccessible=true;
Field.getModifiers;<java.awt.font.TextAttribute: java.awt.font.TextAttribute BIDI_EMBEDDING>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=false;
Field.getModifiers;<java.awt.font.TextAttribute: java.awt.font.TextAttribute BIDI_EMBEDDING>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=false;
Field.getModifiers;<java.awt.font.TextAttribute: java.awt.font.TextAttribute BIDI_EMBEDDING>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=false;
Field.getModifiers;<java.awt.font.TextAttribute: java.awt.font.TextAttribute BIDI_EMBEDDING>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=false;
Field.getModifiers;<java.awt.font.TextAttribute: java.awt.font.TextAttribute BIDI_EMBEDDING>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=false;
Field.getModifiers;<java.awt.font.TextAttribute: java.awt.font.TextAttribute NUMERIC_SHAPING>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=false;
Field.getModifiers;<java.awt.font.TextAttribute: java.awt.font.TextAttribute NUMERIC_SHAPING>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=false;
Field.getModifiers;<java.awt.font.TextAttribute: java.awt.font.TextAttribute NUMERIC_SHAPING>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=false;
Field.getModifiers;<java.awt.font.TextAttribute: java.awt.font.TextAttribute NUMERIC_SHAPING>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=false;
Field.getModifiers;<java.awt.font.TextAttribute: java.awt.font.TextAttribute NUMERIC_SHAPING>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=false;
Field.getModifiers;<java.awt.font.TextAttribute: java.awt.font.TextAttribute RUN_DIRECTION>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=false;
Field.getModifiers;<java.awt.font.TextAttribute: java.awt.font.TextAttribute RUN_DIRECTION>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=false;
Field.getModifiers;<java.awt.font.TextAttribute: java.awt.font.TextAttribute RUN_DIRECTION>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=false;
Field.getModifiers;<java.awt.font.TextAttribute: java.awt.font.TextAttribute RUN_DIRECTION>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=false;
Field.getModifiers;<java.awt.font.TextAttribute: java.awt.font.TextAttribute RUN_DIRECTION>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=false;
Field.getModifiers;<java.awt.font.TextAttribute: java.lang.Boolean RUN_DIRECTION_LTR>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=false;
Field.getModifiers;<java.awt.font.TextAttribute: java.lang.Boolean RUN_DIRECTION_LTR>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=false;
Field.getModifiers;<java.awt.font.TextAttribute: java.lang.Boolean RUN_DIRECTION_LTR>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=false;
Field.getModifiers;<java.awt.font.TextAttribute: java.lang.Boolean RUN_DIRECTION_LTR>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=false;
Field.getModifiers;<java.awt.font.TextAttribute: java.lang.Boolean RUN_DIRECTION_LTR>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_L3: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_L3: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_L3: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_L3: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_L3: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_L4: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_L4: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_L4: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_L4: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_L4: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_LL: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_LL: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_LL: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_LL: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_LL: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=false;
Field.getModifiers;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getName;<java.awt.font.TextAttribute: java.awt.font.TextAttribute BACKGROUND>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.awt.font.TextAttribute BIDI_EMBEDDING>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.awt.font.TextAttribute CHAR_REPLACEMENT>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.awt.font.TextAttribute FAMILY>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.awt.font.TextAttribute FONT>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.awt.font.TextAttribute FOREGROUND>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.awt.font.TextAttribute INPUT_METHOD_HIGHLIGHT>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.awt.font.TextAttribute INPUT_METHOD_UNDERLINE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.awt.font.TextAttribute JUSTIFICATION>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.awt.font.TextAttribute NUMERIC_SHAPING>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.awt.font.TextAttribute POSTURE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.awt.font.TextAttribute RUN_DIRECTION>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.awt.font.TextAttribute SIZE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.awt.font.TextAttribute STRIKETHROUGH>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.awt.font.TextAttribute SUPERSCRIPT>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.awt.font.TextAttribute SWAP_COLORS>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.awt.font.TextAttribute TRANSFORM>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.awt.font.TextAttribute UNDERLINE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.awt.font.TextAttribute WEIGHT>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.awt.font.TextAttribute WIDTH>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Boolean RUN_DIRECTION_LTR>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Boolean RUN_DIRECTION_RTL>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Boolean STRIKETHROUGH_ON>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Boolean SWAP_COLORS_ON>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Float JUSTIFICATION_FULL>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Float JUSTIFICATION_NONE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Float POSTURE_OBLIQUE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Float POSTURE_REGULAR>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Float WEIGHT_BOLD>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Float WEIGHT_DEMIBOLD>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Float WEIGHT_DEMILIGHT>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Float WEIGHT_EXTRABOLD>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Float WEIGHT_EXTRA_LIGHT>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Float WEIGHT_HEAVY>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Float WEIGHT_LIGHT>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Float WEIGHT_MEDIUM>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Float WEIGHT_REGULAR>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Float WEIGHT_SEMIBOLD>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Float WEIGHT_ULTRABOLD>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Float WIDTH_CONDENSED>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Float WIDTH_EXTENDED>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Float WIDTH_REGULAR>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Float WIDTH_SEMI_CONDENSED>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Float WIDTH_SEMI_EXTENDED>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Integer SUPERSCRIPT_SUB>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Integer SUPERSCRIPT_SUPER>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Integer UNDERLINE_LOW_DASHED>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Integer UNDERLINE_LOW_DOTTED>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Integer UNDERLINE_LOW_GRAY>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Integer UNDERLINE_LOW_ONE_PIXEL>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Integer UNDERLINE_LOW_TWO_PIXEL>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Integer UNDERLINE_ON>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.invoke.BoundMethodHandle$Species_L3: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.invoke.BoundMethodHandle$Species_L4: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.invoke.BoundMethodHandle$Species_LL: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.invoke.CallSite: java.lang.invoke.MethodHandle target>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.invoke.MethodHandle: java.lang.invoke.LambdaForm form>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.invoke.MethodHandle: java.lang.invoke.MethodType type>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.invoke.MethodType: java.lang.Class rtype>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.invoke.MethodType: java.lang.Class[] ptypes>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.invoke.MethodType: long serialVersionUID>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.net.Inet6Address: int INADDRSZ>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.net.Inet6Address: int cached_scope_id>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.net.Inet6Address: java.net.Inet6Address$Inet6AddressHolder holder6>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.net.InetAddress: boolean preferIPv6Address>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.net.InetAddress: int IPv4>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.net.InetAddress: int IPv6>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.net.InetAddress: java.net.InetAddress$InetAddressHolder holder>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.CopyOnWriteArrayList: java.util.concurrent.locks.ReentrantLock lock>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.CopyOnWriteArrayList: long serialVersionUID>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.atomic.AtomicBoolean: int value>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.atomic.AtomicBoolean: long serialVersionUID>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.atomic.AtomicBoolean: long valueOffset>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.atomic.AtomicBoolean: sun.misc.Unsafe unsafe>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.atomic.AtomicMarkableReference: java.util.concurrent.atomic.AtomicMarkableReference$Pair pair>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int CANCELLED>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int CONDITION>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int PROPAGATE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int SIGNAL>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int waitStatus>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node EXCLUSIVE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node SHARED>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node next>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node prev>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer: int state>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node head>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node tail>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer: long serialVersionUID>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;java.lang.Class.searchFields;;isAccessible=false;
Field.set*;<java.lang.invoke.BoundMethodHandle$Species_L3: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;java.lang.invoke.BoundMethodHandle$Factory.setSpeciesDataToConcreteBMHClass;792;isAccessible=false;
Field.set*;<java.lang.invoke.BoundMethodHandle$Species_L4: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;java.lang.invoke.BoundMethodHandle$Factory.setSpeciesDataToConcreteBMHClass;792;isAccessible=false;
Field.set*;<java.lang.invoke.BoundMethodHandle$Species_LL: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;java.lang.invoke.BoundMethodHandle$Factory.setSpeciesDataToConcreteBMHClass;792;isAccessible=false;
Method.getModifiers;<Harness: void main(java.lang.String[])>;sun.launcher.LauncherHelper.validateMainClass;557;isAccessible=false;
Method.getName;<Harness: void main(java.lang.String[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DelegatingMethodHandle: boolean isInvokeSpecial()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DelegatingMethodHandle: java.lang.Class internalCallerClass()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DelegatingMethodHandle: java.lang.String internalProperties()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DelegatingMethodHandle: java.lang.invoke.BoundMethodHandle rebind()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DelegatingMethodHandle: java.lang.invoke.LambdaForm chooseDelegatingForm(java.lang.invoke.MethodHandle)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DelegatingMethodHandle: java.lang.invoke.LambdaForm makeReinvokerForm(java.lang.invoke.MethodHandle,int,java.lang.Object,java.lang.String,boolean,java.lang.invoke.LambdaForm$NamedFunction,java.lang.invoke.LambdaForm$NamedFunction)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DelegatingMethodHandle: java.lang.invoke.LambdaForm makeReinvokerForm(java.lang.invoke.MethodHandle,int,java.lang.Object,java.lang.invoke.LambdaForm$NamedFunction)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DelegatingMethodHandle: java.lang.invoke.MemberName internalMemberName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DelegatingMethodHandle: java.lang.invoke.MethodHandle asTypeUncached(java.lang.invoke.MethodType)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DelegatingMethodHandle: java.lang.invoke.MethodHandle copyWith(java.lang.invoke.MethodType,java.lang.invoke.LambdaForm)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DelegatingMethodHandle: java.lang.invoke.MethodHandle getTarget()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DelegatingMethodHandle: java.lang.invoke.MethodHandle getTarget()>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: boolean checkInitialized(java.lang.invoke.MemberName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: boolean shouldBeInitialized(java.lang.invoke.MemberName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: int afIndex(byte,boolean,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: int ftypeKind(java.lang.Class)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object allocateInstance(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object allocateInstance(java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object checkBase(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object checkBase(java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object checkCast(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object checkCast(java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object checkCast(java.lang.Object,java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object constructorMethod(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object constructorMethod(java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object findDirectMethodHandle(java.lang.invoke.LambdaForm$Name)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object internalMemberName(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object internalMemberName(java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object internalMemberNameEnsureInit(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object internalMemberNameEnsureInit(java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object nullCheck(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object staticBase(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object staticBase(java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.String internalProperties()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.BoundMethodHandle rebind()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.DirectMethodHandle make(byte,java.lang.Class,java.lang.invoke.MemberName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.DirectMethodHandle make(java.lang.Class,java.lang.invoke.MemberName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.DirectMethodHandle make(java.lang.invoke.MemberName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.DirectMethodHandle make(java.lang.reflect.Field)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.DirectMethodHandle make(java.lang.reflect.Method)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.DirectMethodHandle makeAllocator(java.lang.invoke.MemberName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.LambdaForm makePreparedFieldLambdaForm(byte,boolean,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.LambdaForm makePreparedLambdaForm(java.lang.invoke.MethodType,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.LambdaForm preparedFieldLambdaForm(byte,boolean,java.lang.Class)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.LambdaForm preparedFieldLambdaForm(java.lang.invoke.MemberName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.LambdaForm preparedLambdaForm(java.lang.invoke.MemberName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.LambdaForm preparedLambdaForm(java.lang.invoke.MethodType,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.MemberName internalMemberName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.MethodHandle copyWith(java.lang.invoke.MethodType,java.lang.invoke.LambdaForm)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: long fieldOffset(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: long fieldOffset(java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: long staticOffset(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: long staticOffset(java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: void ensureInitialized()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: void ensureInitialized(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: void ensureInitialized(java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: void maybeCompile(java.lang.invoke.LambdaForm,java.lang.invoke.MemberName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: boolean checkInvoker(java.lang.invoke.MethodHandle)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.Class impliedRestargType(java.lang.invoke.MethodType,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.Object checkGenericType(java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.Object checkGenericType(java.lang.Object,java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.Object getCallSiteTarget(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.Object getCallSiteTarget(java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.String toString()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.LambdaForm callSiteForm(java.lang.invoke.MethodType,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.LambdaForm invokeHandleForm(java.lang.invoke.MethodType,boolean,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.MemberName invokeBasicMethod(java.lang.invoke.MethodType)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.MemberName linkToCallSiteMethod(java.lang.invoke.MethodType)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.MemberName linkToTargetMethod(java.lang.invoke.MethodType)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.MemberName methodHandleInvokeLinkerMethod(java.lang.String,java.lang.invoke.MethodType,java.lang.Object[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.MethodHandle basicInvoker()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.MethodHandle cachedInvoker(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.MethodHandle exactInvoker()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.MethodHandle genericInvoker()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.MethodHandle makeExactOrGeneralInvoker(boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.MethodHandle setCachedInvoker(int,java.lang.invoke.MethodHandle)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.MethodHandle spreadInvoker(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.WrongMethodTypeException newWrongMethodTypeException(java.lang.invoke.MethodType,java.lang.invoke.MethodType)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: void checkCustomized(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: void checkCustomized(java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: void checkExactType(java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: void checkExactType(java.lang.Object,java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: void maybeCompileToBytecode(java.lang.invoke.MethodHandle)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: void maybeCustomize(java.lang.invoke.MethodHandle)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: boolean assertCorrectArity(java.lang.invoke.MethodHandle,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: boolean profileBoolean(boolean,int[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: boolean profileBoolean(boolean,int[])>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: int countNonNull(java.lang.Object[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.ClassCastException newClassCastException(java.lang.Class,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object castReference(java.lang.Class,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object copyAsPrimitiveArray(sun.invoke.util.Wrapper,java.lang.Object[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object guardWithCatch(java.lang.invoke.MethodHandle,java.lang.Class,java.lang.invoke.MethodHandle,java.lang.Object[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object guardWithCatch(java.lang.invoke.MethodHandle,java.lang.Class,java.lang.invoke.MethodHandle,java.lang.Object[])>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object valueConversion(java.lang.Class,java.lang.Class,boolean,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] array()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] array(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] array(java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] array(java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] array(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] array(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] array(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] array(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] array(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] array(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] array(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] computeValueConversions(java.lang.invoke.MethodType,java.lang.invoke.MethodType,boolean,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] fillArray(java.lang.Integer,java.lang.Object[],java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] fillArray(java.lang.Integer,java.lang.Object[],java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] fillArray(java.lang.Integer,java.lang.Object[],java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] fillArray(java.lang.Integer,java.lang.Object[],java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] fillArray(java.lang.Integer,java.lang.Object[],java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] fillArray(java.lang.Integer,java.lang.Object[],java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] fillArray(java.lang.Integer,java.lang.Object[],java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] fillArray(java.lang.Integer,java.lang.Object[],java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] fillArray(java.lang.Integer,java.lang.Object[],java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] fillArray(java.lang.Integer,java.lang.Object[],java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] fillNewArray(java.lang.Integer,java.lang.Object[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] fillNewTypedArray(java.lang.Object[],java.lang.Integer,java.lang.Object[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] identity(java.lang.Object[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] makeArray(java.lang.Object[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] prepend(java.lang.Object,java.lang.Object[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.LambdaForm makeGuardWithCatchForm(java.lang.invoke.MethodType)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.LambdaForm makeGuardWithTestForm(java.lang.invoke.MethodType)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle bindCaller(java.lang.invoke.MethodHandle,java.lang.Class)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle buildArrayProducer(java.lang.Class)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle buildFiller(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle buildVarargsArray(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle fakeMethodHandleInvoke(java.lang.invoke.MemberName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle fillToRight(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle findCollector(java.lang.String,int,java.lang.Class,java.lang.Class[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makeArrayElementAccessor(java.lang.Class,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makeBlockInlningWrapper(java.lang.invoke.MethodHandle)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makeCollectArguments(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,int,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makeGuardWithCatch(java.lang.invoke.MethodHandle,java.lang.Class,java.lang.invoke.MethodHandle)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makeGuardWithTest(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makeIntrinsic(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandleImpl$Intrinsic)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makeIntrinsic(java.lang.invoke.MethodType,java.lang.invoke.LambdaForm,java.lang.invoke.MethodHandleImpl$Intrinsic)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makePairwiseConvert(java.lang.invoke.MethodHandle,java.lang.invoke.MethodType,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makePairwiseConvert(java.lang.invoke.MethodHandle,java.lang.invoke.MethodType,boolean,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makePairwiseConvertByEditor(java.lang.invoke.MethodHandle,java.lang.invoke.MethodType,boolean,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makePairwiseConvertIndirect(java.lang.invoke.MethodHandle,java.lang.invoke.MethodType,boolean,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makeSpreadArguments(java.lang.invoke.MethodHandle,java.lang.Class,int,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makeVarargsCollector(java.lang.invoke.MethodHandle,java.lang.Class)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makeWrappedMember(java.lang.invoke.MethodHandle,java.lang.invoke.MemberName,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle profile(java.lang.invoke.MethodHandle)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle selectAlternative(boolean,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle throwException(java.lang.invoke.MethodType)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle varargsArray(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle varargsArray(java.lang.Class,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle[] access$000()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle[] access$100()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle[] makeArrays()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle[] makeFillArrays()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: sun.invoke.empty.Empty throwException(java.lang.Throwable)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: sun.invoke.empty.Empty throwException(java.lang.Throwable)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: void assertSame(java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: void checkSpreadArgument(java.lang.Object,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: void checkSpreadArgument(java.lang.Object,int)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: void fillWithArguments(java.lang.Object[],int,java.lang.Object[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: void initStatics()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.batik.apps.rasterizer.Main: boolean proceedOnSourceTranscodingFailure(org.apache.batik.apps.rasterizer.SVGConverterSource,java.io.File,java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.batik.apps.rasterizer.Main: boolean proceedWithComputedTask(org.apache.batik.transcoder.Transcoder,java.util.Map,java.util.List,java.util.List)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.batik.apps.rasterizer.Main: boolean proceedWithSourceTranscoding(org.apache.batik.apps.rasterizer.SVGConverterSource,java.io.File)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.batik.apps.rasterizer.Main: void execute()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.batik.apps.rasterizer.Main: void main(java.lang.String[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.batik.apps.rasterizer.Main: void onSourceTranscodingSuccess(org.apache.batik.apps.rasterizer.SVGConverterSource,java.io.File)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.batik.apps.rasterizer.Main: void validateConverterConfig(org.apache.batik.apps.rasterizer.SVGConverter)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<sun.font.EAttribute: java.lang.String toString()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<sun.font.EAttribute: sun.font.EAttribute forAttribute(java.text.AttributedCharacterIterator$Attribute)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<sun.font.EAttribute: sun.font.EAttribute valueOf(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<sun.font.EAttribute: sun.font.EAttribute[] values()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.invoke;<org.apache.batik.apps.rasterizer.Main: void execute()>;org.dacapo.harness.Batik.iterate;63;isAccessible=false;
Method.invoke;<sun.font.EAttribute: sun.font.EAttribute[] values()>;java.lang.Class.getEnumConstantsShared;;isAccessible=true;
