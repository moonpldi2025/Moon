Array.newInstance;java.lang.String[];java.util.Arrays.copyOf;3212;;
Array.newInstance;java.lang.Thread[];java.util.Arrays.copyOf;3212;;
Array.newInstance;sun.security.jca.ProviderConfig[];java.util.Arrays.copyOf;3212;;
Class.forName;java.security.AccessController;org.apache.xml.dtm.SecuritySupport.<clinit>;50;;
Class.forName;java.security.AccessController;org.apache.xml.serializer.OutputPropertiesFactory.findAccessControllerClass;228;;
Class.forName;java.security.AccessController;org.apache.xml.serializer.SecuritySupport.<clinit>;48;;
Class.forName;java.security.AccessController;org.xml.sax.helpers.SecuritySupport.<clinit>;;;
Class.forName;java.security.MessageDigestSpi;java.security.Security.getSpiClass;675;;
Class.forName;org.apache.xerces.parsers.ObjectFactory;org.apache.xerces.parsers.ObjectFactory.class$;;;
Class.forName;org.dacapo.harness.Xalan;org.dacapo.harness.TestHarness.findClass;281;;
Class.forName;org.dacapo.xalan.XSLTBench;org.dacapo.harness.Xalan.<init>;33;;
Class.forName;sun.net.www.protocol.jar.Handler;java.net.URL.getURLStreamHandler;1175;;
Class.forName;sun.security.provider.SHA;java.security.Provider$Service.getImplClass;1634;;
Class.getDeclaredField;<java.lang.invoke.MethodHandle: java.lang.invoke.LambdaForm form>;java.lang.invoke.MethodHandle.<clinit>;1451;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.atomic.AtomicBoolean: int value>;java.util.concurrent.atomic.AtomicBoolean.<clinit>;59;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.atomic.AtomicMarkableReference: java.util.concurrent.atomic.AtomicMarkableReference$Pair pair>;java.util.concurrent.atomic.AtomicMarkableReference.objectFieldOffset;204;isAccessible=false;
Class.getMethod;<Harness: void main(java.lang.String[])>;sun.launcher.LauncherHelper.validateMainClass;544;isAccessible=false;
Class.getMethod;<org.apache.xalan.processor.ProcessorOutputElem: void setDoctypePublic(java.lang.String)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1612;isAccessible=false;
Class.getMethod;<org.apache.xalan.processor.ProcessorOutputElem: void setEncoding(java.lang.String)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1612;isAccessible=false;
Class.getMethod;<org.apache.xalan.processor.ProcessorOutputElem: void setIndent(boolean)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1612;isAccessible=false;
Class.getMethod;<org.apache.xalan.processor.ProcessorOutputElem: void setMethod(org.apache.xml.utils.QName)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1612;isAccessible=false;
Class.getMethod;<org.apache.xalan.processor.WhitespaceInfoPaths: void setElements(java.util.Vector)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1612;isAccessible=false;
Class.getMethod;<org.apache.xalan.templates.ElemApplyTemplates: void setMode(org.apache.xml.utils.QName)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1612;isAccessible=false;
Class.getMethod;<org.apache.xalan.templates.ElemAttribute: void setName(org.apache.xalan.templates.AVT)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1612;isAccessible=false;
Class.getMethod;<org.apache.xalan.templates.ElemCallTemplate: void setName(org.apache.xml.utils.QName)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1612;isAccessible=false;
Class.getMethod;<org.apache.xalan.templates.ElemForEach: void setSelect(org.apache.xpath.XPath)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1612;isAccessible=false;
Class.getMethod;<org.apache.xalan.templates.ElemIf: void setTest(org.apache.xpath.XPath)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1612;isAccessible=false;
Class.getMethod;<org.apache.xalan.templates.ElemLiteralResult: void addLiteralResultAttribute(org.apache.xalan.templates.AVT)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1612;isAccessible=false;
Class.getMethod;<org.apache.xalan.templates.ElemMessage: void setTerminate(boolean)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1612;isAccessible=false;
Class.getMethod;<org.apache.xalan.templates.ElemNumber: void setCount(org.apache.xpath.XPath)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1612;isAccessible=false;
Class.getMethod;<org.apache.xalan.templates.ElemNumber: void setFormat(org.apache.xalan.templates.AVT)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1612;isAccessible=false;
Class.getMethod;<org.apache.xalan.templates.ElemNumber: void setFrom(org.apache.xpath.XPath)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1612;isAccessible=false;
Class.getMethod;<org.apache.xalan.templates.ElemNumber: void setLevel(int)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1612;isAccessible=false;
Class.getMethod;<org.apache.xalan.templates.ElemTemplate: void setMatch(org.apache.xpath.XPath)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1612;isAccessible=false;
Class.getMethod;<org.apache.xalan.templates.ElemTemplate: void setMode(org.apache.xml.utils.QName)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1612;isAccessible=false;
Class.getMethod;<org.apache.xalan.templates.ElemTemplate: void setName(org.apache.xml.utils.QName)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1612;isAccessible=false;
Class.getMethod;<org.apache.xalan.templates.ElemText: void setDisableOutputEscaping(boolean)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1612;isAccessible=false;
Class.getMethod;<org.apache.xalan.templates.ElemValueOf: void setSelect(org.apache.xpath.XPath)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1612;isAccessible=false;
Class.getMethod;<org.apache.xalan.templates.ElemVariable: void setName(org.apache.xml.utils.QName)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1612;isAccessible=false;
Class.getMethod;<org.apache.xalan.templates.ElemVariable: void setSelect(org.apache.xpath.XPath)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1612;isAccessible=false;
Class.getMethod;<org.apache.xalan.templates.ElemWhen: void setTest(org.apache.xpath.XPath)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1612;isAccessible=false;
Class.getMethod;<org.apache.xalan.templates.ElemWithParam: void setName(org.apache.xml.utils.QName)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1612;isAccessible=false;
Class.getMethod;<org.apache.xalan.templates.ElemWithParam: void setSelect(org.apache.xpath.XPath)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1612;isAccessible=false;
Class.getMethod;<org.apache.xalan.templates.Stylesheet: void setExcludeResultPrefixes(org.apache.xml.utils.StringVector)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1612;isAccessible=false;
Class.getMethod;<org.apache.xalan.templates.Stylesheet: void setVersion(java.lang.String)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1612;isAccessible=false;
Class.getMethod;<org.apache.xalan.transformer.TransformerImpl: javax.xml.transform.ErrorListener getErrorListener()>;org.apache.xpath.XPathContext.<init>;352;isAccessible=false;
Class.getMethod;<org.dacapo.xalan.XSLTBench: void createWorkers(int)>;org.dacapo.harness.Xalan.<init>;35;isAccessible=false;
Class.getMethod;<org.dacapo.xalan.XSLTBench: void doWork(int)>;org.dacapo.harness.Xalan.<init>;34;isAccessible=false;
Class.newInstance;java.io.StringWriter;org.apache.xml.utils.ObjectPool.getInstance;136;;
Class.newInstance;org.apache.xalan.processor.TransformerFactoryImpl;javax.xml.transform.FactoryFinder.newInstance;;;
Class.newInstance;org.apache.xalan.templates.ElemApplyTemplates;org.apache.xalan.processor.ProcessorTemplateElem.startElement;63;;
Class.newInstance;org.apache.xalan.templates.ElemAttribute;org.apache.xalan.processor.ProcessorTemplateElem.startElement;63;;
Class.newInstance;org.apache.xalan.templates.ElemCallTemplate;org.apache.xalan.processor.ProcessorTemplateElem.startElement;63;;
Class.newInstance;org.apache.xalan.templates.ElemChoose;org.apache.xalan.processor.ProcessorTemplateElem.startElement;63;;
Class.newInstance;org.apache.xalan.templates.ElemCopy;org.apache.xalan.processor.ProcessorTemplateElem.startElement;63;;
Class.newInstance;org.apache.xalan.templates.ElemForEach;org.apache.xalan.processor.ProcessorTemplateElem.startElement;63;;
Class.newInstance;org.apache.xalan.templates.ElemIf;org.apache.xalan.processor.ProcessorTemplateElem.startElement;63;;
Class.newInstance;org.apache.xalan.templates.ElemLiteralResult;org.apache.xalan.processor.ProcessorLRE.startElement;254;;
Class.newInstance;org.apache.xalan.templates.ElemMessage;org.apache.xalan.processor.ProcessorTemplateElem.startElement;63;;
Class.newInstance;org.apache.xalan.templates.ElemNumber;org.apache.xalan.processor.ProcessorTemplateElem.startElement;63;;
Class.newInstance;org.apache.xalan.templates.ElemOtherwise;org.apache.xalan.processor.ProcessorTemplateElem.startElement;63;;
Class.newInstance;org.apache.xalan.templates.ElemParam;org.apache.xalan.processor.ProcessorTemplateElem.startElement;63;;
Class.newInstance;org.apache.xalan.templates.ElemTemplate;org.apache.xalan.processor.ProcessorTemplateElem.startElement;63;;
Class.newInstance;org.apache.xalan.templates.ElemText;org.apache.xalan.processor.ProcessorTemplateElem.startElement;63;;
Class.newInstance;org.apache.xalan.templates.ElemValueOf;org.apache.xalan.processor.ProcessorTemplateElem.startElement;63;;
Class.newInstance;org.apache.xalan.templates.ElemVariable;org.apache.xalan.processor.ProcessorTemplateElem.startElement;63;;
Class.newInstance;org.apache.xalan.templates.ElemWhen;org.apache.xalan.processor.ProcessorTemplateElem.startElement;63;;
Class.newInstance;org.apache.xalan.templates.ElemWithParam;org.apache.xalan.processor.ProcessorTemplateElem.startElement;63;;
Class.newInstance;org.apache.xerces.impl.dv.dtd.DTDDVFactoryImpl;org.apache.xerces.impl.dv.ObjectFactory.newInstance;;;
Class.newInstance;org.apache.xerces.jaxp.SAXParserFactoryImpl;javax.xml.parsers.FactoryFinder.newInstance;;;
Class.newInstance;org.apache.xerces.parsers.SAXParser;org.xml.sax.helpers.NewInstance.newInstance;;;
Class.newInstance;org.apache.xerces.parsers.XIncludeAwareParserConfiguration;org.apache.xerces.parsers.ObjectFactory.newInstance;;;
Class.newInstance;org.apache.xml.dtm.ref.DTMManagerDefault;org.apache.xml.dtm.ObjectFactory.createObject;143;;
Class.newInstance;org.apache.xml.serializer.ToHTMLStream;org.apache.xml.serializer.SerializerFactory.getSerializer;133;;
Class.newInstance;org.apache.xml.serializer.ToHTMLStream;org.apache.xml.serializer.SerializerFactory.getSerializer;138;;
Class.newInstance;org.apache.xml.serializer.ToTextStream;org.apache.xml.utils.ObjectPool.getInstance;136;;
Class.newInstance;org.apache.xml.utils.FastStringBuffer;org.apache.xml.utils.ObjectPool.getInstance;136;;
Class.newInstance;org.apache.xml.utils.res.XResources_en;java.util.ResourceBundle$Control.newBundle;2645;;
Class.newInstance;org.apache.xpath.functions.FuncCount;org.apache.xpath.compiler.FunctionTable.getFunction;333;;
Class.newInstance;org.apache.xpath.functions.FuncGenerateId;org.apache.xpath.compiler.FunctionTable.getFunction;333;;
Class.newInstance;org.apache.xpath.functions.FuncId;org.apache.xpath.compiler.FunctionTable.getFunction;333;;
Class.newInstance;org.apache.xpath.functions.FuncLocalPart;org.apache.xpath.compiler.FunctionTable.getFunction;333;;
Class.newInstance;org.apache.xpath.functions.FuncNot;org.apache.xpath.compiler.FunctionTable.getFunction;333;;
Class.newInstance;org.apache.xpath.functions.FuncPosition;org.apache.xpath.compiler.FunctionTable.getFunction;333;;
Class.newInstance;org.apache.xpath.functions.FuncQname;org.apache.xpath.compiler.FunctionTable.getFunction;333;;
Class.newInstance;org.apache.xpath.functions.FuncStartsWith;org.apache.xpath.compiler.FunctionTable.getFunction;333;;
Class.newInstance;sun.net.www.protocol.jar.Handler;java.net.URL.getURLStreamHandler;1184;;
Class.newInstance;sun.reflect.GeneratedConstructorAccessor10;sun.reflect.MethodAccessorGenerator$1.run;403;;
Class.newInstance;sun.reflect.GeneratedConstructorAccessor11;sun.reflect.MethodAccessorGenerator$1.run;403;;
Class.newInstance;sun.reflect.GeneratedConstructorAccessor12;sun.reflect.MethodAccessorGenerator$1.run;403;;
Class.newInstance;sun.reflect.GeneratedConstructorAccessor13;sun.reflect.MethodAccessorGenerator$1.run;403;;
Class.newInstance;sun.reflect.GeneratedConstructorAccessor14;sun.reflect.MethodAccessorGenerator$1.run;403;;
Class.newInstance;sun.reflect.GeneratedConstructorAccessor15;sun.reflect.MethodAccessorGenerator$1.run;403;;
Class.newInstance;sun.reflect.GeneratedConstructorAccessor16;sun.reflect.MethodAccessorGenerator$1.run;403;;
Class.newInstance;sun.reflect.GeneratedConstructorAccessor17;sun.reflect.MethodAccessorGenerator$1.run;403;;
Class.newInstance;sun.reflect.GeneratedConstructorAccessor18;sun.reflect.MethodAccessorGenerator$1.run;403;;
Class.newInstance;sun.reflect.GeneratedConstructorAccessor1;sun.reflect.MethodAccessorGenerator$1.run;403;;
Class.newInstance;sun.reflect.GeneratedConstructorAccessor2;sun.reflect.MethodAccessorGenerator$1.run;403;;
Class.newInstance;sun.reflect.GeneratedConstructorAccessor3;sun.reflect.MethodAccessorGenerator$1.run;403;;
Class.newInstance;sun.reflect.GeneratedConstructorAccessor4;sun.reflect.MethodAccessorGenerator$1.run;403;;
Class.newInstance;sun.reflect.GeneratedConstructorAccessor5;sun.reflect.MethodAccessorGenerator$1.run;403;;
Class.newInstance;sun.reflect.GeneratedConstructorAccessor6;sun.reflect.MethodAccessorGenerator$1.run;403;;
Class.newInstance;sun.reflect.GeneratedConstructorAccessor7;sun.reflect.MethodAccessorGenerator$1.run;403;;
Class.newInstance;sun.reflect.GeneratedConstructorAccessor8;sun.reflect.MethodAccessorGenerator$1.run;403;;
Class.newInstance;sun.reflect.GeneratedConstructorAccessor9;sun.reflect.MethodAccessorGenerator$1.run;403;;
Class.newInstance;sun.reflect.GeneratedMethodAccessor10;sun.reflect.MethodAccessorGenerator$1.run;403;;
Class.newInstance;sun.reflect.GeneratedMethodAccessor11;sun.reflect.MethodAccessorGenerator$1.run;403;;
Class.newInstance;sun.reflect.GeneratedMethodAccessor12;sun.reflect.MethodAccessorGenerator$1.run;403;;
Class.newInstance;sun.reflect.GeneratedMethodAccessor13;sun.reflect.MethodAccessorGenerator$1.run;403;;
Class.newInstance;sun.reflect.GeneratedMethodAccessor1;sun.reflect.MethodAccessorGenerator$1.run;403;;
Class.newInstance;sun.reflect.GeneratedMethodAccessor2;sun.reflect.MethodAccessorGenerator$1.run;403;;
Class.newInstance;sun.reflect.GeneratedMethodAccessor3;sun.reflect.MethodAccessorGenerator$1.run;403;;
Class.newInstance;sun.reflect.GeneratedMethodAccessor4;sun.reflect.MethodAccessorGenerator$1.run;403;;
Class.newInstance;sun.reflect.GeneratedMethodAccessor5;sun.reflect.MethodAccessorGenerator$1.run;403;;
Class.newInstance;sun.reflect.GeneratedMethodAccessor6;sun.reflect.MethodAccessorGenerator$1.run;403;;
Class.newInstance;sun.reflect.GeneratedMethodAccessor7;sun.reflect.MethodAccessorGenerator$1.run;403;;
Class.newInstance;sun.reflect.GeneratedMethodAccessor8;sun.reflect.MethodAccessorGenerator$1.run;403;;
Class.newInstance;sun.reflect.GeneratedMethodAccessor9;sun.reflect.MethodAccessorGenerator$1.run;403;;
Class.newInstance;sun.security.provider.Sun;sun.security.jca.ProviderConfig$2.run;221;;
Class.newInstance;sun.text.resources.FormatData;java.util.ResourceBundle$Control.newBundle;2645;;
Class.newInstance;sun.text.resources.en.FormatData_en;java.util.ResourceBundle$Control.newBundle;2645;;
Class.newInstance;sun.text.resources.en.FormatData_en_US;java.util.ResourceBundle$Control.newBundle;2645;;
Class.newInstance;sun.util.resources.CurrencyNames;java.util.ResourceBundle$Control.newBundle;2645;;
Class.newInstance;sun.util.resources.en.CurrencyNames_en_US;java.util.ResourceBundle$Control.newBundle;2645;;
Constructor.getModifiers;<java.io.StringWriter: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<java.io.StringWriter: void <init>()>;sun.reflect.NativeConstructorAccessorImpl.newInstance;58;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.processor.TransformerFactoryImpl: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemApplyTemplates: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemApplyTemplates: void <init>()>;sun.reflect.NativeConstructorAccessorImpl.newInstance;58;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemAttribute: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemAttribute: void <init>()>;sun.reflect.NativeConstructorAccessorImpl.newInstance;58;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemCallTemplate: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemCallTemplate: void <init>()>;sun.reflect.NativeConstructorAccessorImpl.newInstance;58;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemChoose: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemChoose: void <init>()>;sun.reflect.NativeConstructorAccessorImpl.newInstance;58;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemCopy: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemForEach: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemIf: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemIf: void <init>()>;sun.reflect.NativeConstructorAccessorImpl.newInstance;58;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemLiteralResult: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemLiteralResult: void <init>()>;sun.reflect.NativeConstructorAccessorImpl.newInstance;58;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemMessage: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemNumber: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemOtherwise: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemOtherwise: void <init>()>;sun.reflect.NativeConstructorAccessorImpl.newInstance;58;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemParam: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemTemplate: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemTemplate: void <init>()>;sun.reflect.NativeConstructorAccessorImpl.newInstance;58;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemText: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemText: void <init>()>;sun.reflect.NativeConstructorAccessorImpl.newInstance;58;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemValueOf: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemValueOf: void <init>()>;sun.reflect.NativeConstructorAccessorImpl.newInstance;58;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemVariable: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemWhen: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemWhen: void <init>()>;sun.reflect.NativeConstructorAccessorImpl.newInstance;58;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemWithParam: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.templates.ElemWithParam: void <init>()>;sun.reflect.NativeConstructorAccessorImpl.newInstance;58;isAccessible=true;
Constructor.getModifiers;<org.apache.xerces.impl.dv.dtd.DTDDVFactoryImpl: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.xerces.jaxp.SAXParserFactoryImpl: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.xerces.parsers.SAXParser: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.xerces.parsers.XIncludeAwareParserConfiguration: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.xml.dtm.ref.DTMManagerDefault: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.xml.dtm.ref.DTMManagerDefault: void <init>()>;sun.reflect.NativeConstructorAccessorImpl.newInstance;58;isAccessible=true;
Constructor.getModifiers;<org.apache.xml.serializer.ToHTMLStream: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.xml.serializer.ToHTMLStream: void <init>()>;sun.reflect.NativeConstructorAccessorImpl.newInstance;58;isAccessible=true;
Constructor.getModifiers;<org.apache.xml.serializer.ToTextStream: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.xml.serializer.ToTextStream: void <init>()>;sun.reflect.NativeConstructorAccessorImpl.newInstance;58;isAccessible=true;
Constructor.getModifiers;<org.apache.xml.utils.FastStringBuffer: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.xml.utils.res.XResources_en: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.xpath.functions.FuncCount: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.xpath.functions.FuncGenerateId: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.xpath.functions.FuncId: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.xpath.functions.FuncId: void <init>()>;sun.reflect.NativeConstructorAccessorImpl.newInstance;58;isAccessible=true;
Constructor.getModifiers;<org.apache.xpath.functions.FuncLocalPart: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.xpath.functions.FuncNot: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.xpath.functions.FuncPosition: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.xpath.functions.FuncQname: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.xpath.functions.FuncQname: void <init>()>;sun.reflect.NativeConstructorAccessorImpl.newInstance;58;isAccessible=true;
Constructor.getModifiers;<org.apache.xpath.functions.FuncStartsWith: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.net.www.protocol.jar.Handler: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedConstructorAccessor10: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedConstructorAccessor11: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedConstructorAccessor12: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedConstructorAccessor13: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedConstructorAccessor14: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedConstructorAccessor15: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedConstructorAccessor16: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedConstructorAccessor17: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedConstructorAccessor18: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedConstructorAccessor1: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedConstructorAccessor2: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedConstructorAccessor3: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedConstructorAccessor4: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedConstructorAccessor5: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedConstructorAccessor6: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedConstructorAccessor7: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedConstructorAccessor8: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedConstructorAccessor9: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedMethodAccessor10: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedMethodAccessor11: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedMethodAccessor12: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedMethodAccessor13: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedMethodAccessor1: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedMethodAccessor2: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedMethodAccessor3: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedMethodAccessor4: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedMethodAccessor5: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedMethodAccessor6: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedMethodAccessor7: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedMethodAccessor8: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedMethodAccessor9: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.security.provider.Sun: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.text.resources.FormatData: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.text.resources.en.FormatData_en: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.text.resources.en.FormatData_en_US: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.util.resources.CurrencyNames: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.util.resources.en.CurrencyNames_en_US: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<java.io.StringWriter: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.xalan.processor.TransformerFactoryImpl: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.xalan.templates.ElemApplyTemplates: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.xalan.templates.ElemAttribute: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.xalan.templates.ElemCallTemplate: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.xalan.templates.ElemChoose: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.xalan.templates.ElemCopy: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.xalan.templates.ElemForEach: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.xalan.templates.ElemIf: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.xalan.templates.ElemLiteralResult: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.xalan.templates.ElemMessage: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.xalan.templates.ElemNumber: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.xalan.templates.ElemOtherwise: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.xalan.templates.ElemParam: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.xalan.templates.ElemTemplate: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.xalan.templates.ElemText: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.xalan.templates.ElemValueOf: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.xalan.templates.ElemVariable: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.xalan.templates.ElemWhen: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.xalan.templates.ElemWithParam: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.xerces.impl.dv.dtd.DTDDVFactoryImpl: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.xerces.jaxp.SAXParserFactoryImpl: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.xerces.parsers.SAXParser: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.xerces.parsers.XIncludeAwareParserConfiguration: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.xml.dtm.ref.DTMManagerDefault: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.xml.serializer.ToHTMLStream: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.xml.serializer.ToTextStream: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.xml.utils.FastStringBuffer: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.xml.utils.res.XResources_en: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.xpath.functions.FuncCount: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.xpath.functions.FuncGenerateId: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.xpath.functions.FuncId: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.xpath.functions.FuncLocalPart: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.xpath.functions.FuncNot: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.xpath.functions.FuncPosition: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.xpath.functions.FuncQname: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.xpath.functions.FuncStartsWith: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.dacapo.harness.Xalan: void <init>(org.dacapo.parser.Config,java.io.File)>;org.dacapo.harness.TestHarness.runBenchmark;211;isAccessible=false;
Constructor.newInstance;<org.dacapo.xalan.XSLTBench: void <init>(java.io.File)>;org.dacapo.harness.Xalan.<init>;38;isAccessible=false;
Constructor.newInstance;<sun.net.www.protocol.jar.Handler: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedConstructorAccessor10: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedConstructorAccessor11: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedConstructorAccessor12: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedConstructorAccessor13: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedConstructorAccessor14: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedConstructorAccessor15: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedConstructorAccessor16: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedConstructorAccessor17: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedConstructorAccessor18: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedConstructorAccessor1: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedConstructorAccessor2: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedConstructorAccessor3: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedConstructorAccessor4: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedConstructorAccessor5: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedConstructorAccessor6: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedConstructorAccessor7: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedConstructorAccessor8: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedConstructorAccessor9: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedMethodAccessor10: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedMethodAccessor11: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedMethodAccessor12: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedMethodAccessor13: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedMethodAccessor1: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedMethodAccessor2: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedMethodAccessor3: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedMethodAccessor4: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedMethodAccessor5: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedMethodAccessor6: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedMethodAccessor7: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedMethodAccessor8: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedMethodAccessor9: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.security.provider.SHA: void <init>()>;java.security.Provider$Service.newInstance;1595;isAccessible=false;
Constructor.newInstance;<sun.security.provider.Sun: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.text.resources.FormatData: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.text.resources.en.FormatData_en: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.text.resources.en.FormatData_en_US: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.util.resources.CurrencyNames: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.util.resources.en.CurrencyNames_en_US: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Field.getName;<java.lang.invoke.MethodHandle: java.lang.invoke.LambdaForm form>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.invoke.MethodHandle: java.lang.invoke.MethodType type>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.atomic.AtomicBoolean: int value>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.atomic.AtomicBoolean: long serialVersionUID>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.atomic.AtomicBoolean: long valueOffset>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.atomic.AtomicBoolean: sun.misc.Unsafe unsafe>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.atomic.AtomicMarkableReference: java.util.concurrent.atomic.AtomicMarkableReference$Pair pair>;java.lang.Class.searchFields;;isAccessible=false;
Method.getDeclaringClass;<org.apache.xalan.templates.ElemApplyTemplates: void setMode(org.apache.xml.utils.QName)>;sun.reflect.NativeMethodAccessorImpl.invoke;50;isAccessible=false;
Method.getDeclaringClass;<org.apache.xalan.templates.ElemApplyTemplates: void setMode(org.apache.xml.utils.QName)>;sun.reflect.NativeMethodAccessorImpl.invoke;53;isAccessible=false;
Method.getDeclaringClass;<org.apache.xalan.templates.ElemAttribute: void setName(org.apache.xalan.templates.AVT)>;sun.reflect.NativeMethodAccessorImpl.invoke;50;isAccessible=false;
Method.getDeclaringClass;<org.apache.xalan.templates.ElemAttribute: void setName(org.apache.xalan.templates.AVT)>;sun.reflect.NativeMethodAccessorImpl.invoke;53;isAccessible=false;
Method.getDeclaringClass;<org.apache.xalan.templates.ElemCallTemplate: void setName(org.apache.xml.utils.QName)>;sun.reflect.NativeMethodAccessorImpl.invoke;50;isAccessible=false;
Method.getDeclaringClass;<org.apache.xalan.templates.ElemCallTemplate: void setName(org.apache.xml.utils.QName)>;sun.reflect.NativeMethodAccessorImpl.invoke;53;isAccessible=false;
Method.getDeclaringClass;<org.apache.xalan.templates.ElemForEach: void setSelect(org.apache.xpath.XPath)>;sun.reflect.NativeMethodAccessorImpl.invoke;50;isAccessible=false;
Method.getDeclaringClass;<org.apache.xalan.templates.ElemForEach: void setSelect(org.apache.xpath.XPath)>;sun.reflect.NativeMethodAccessorImpl.invoke;53;isAccessible=false;
Method.getDeclaringClass;<org.apache.xalan.templates.ElemIf: void setTest(org.apache.xpath.XPath)>;sun.reflect.NativeMethodAccessorImpl.invoke;50;isAccessible=false;
Method.getDeclaringClass;<org.apache.xalan.templates.ElemIf: void setTest(org.apache.xpath.XPath)>;sun.reflect.NativeMethodAccessorImpl.invoke;53;isAccessible=false;
Method.getDeclaringClass;<org.apache.xalan.templates.ElemLiteralResult: void addLiteralResultAttribute(org.apache.xalan.templates.AVT)>;sun.reflect.NativeMethodAccessorImpl.invoke;50;isAccessible=false;
Method.getDeclaringClass;<org.apache.xalan.templates.ElemLiteralResult: void addLiteralResultAttribute(org.apache.xalan.templates.AVT)>;sun.reflect.NativeMethodAccessorImpl.invoke;53;isAccessible=false;
Method.getDeclaringClass;<org.apache.xalan.templates.ElemTemplate: void setMatch(org.apache.xpath.XPath)>;sun.reflect.NativeMethodAccessorImpl.invoke;50;isAccessible=false;
Method.getDeclaringClass;<org.apache.xalan.templates.ElemTemplate: void setMatch(org.apache.xpath.XPath)>;sun.reflect.NativeMethodAccessorImpl.invoke;53;isAccessible=false;
Method.getDeclaringClass;<org.apache.xalan.templates.ElemTemplate: void setMode(org.apache.xml.utils.QName)>;sun.reflect.NativeMethodAccessorImpl.invoke;50;isAccessible=false;
Method.getDeclaringClass;<org.apache.xalan.templates.ElemTemplate: void setMode(org.apache.xml.utils.QName)>;sun.reflect.NativeMethodAccessorImpl.invoke;53;isAccessible=false;
Method.getDeclaringClass;<org.apache.xalan.templates.ElemValueOf: void setSelect(org.apache.xpath.XPath)>;sun.reflect.NativeMethodAccessorImpl.invoke;50;isAccessible=false;
Method.getDeclaringClass;<org.apache.xalan.templates.ElemValueOf: void setSelect(org.apache.xpath.XPath)>;sun.reflect.NativeMethodAccessorImpl.invoke;53;isAccessible=false;
Method.getDeclaringClass;<org.apache.xalan.templates.ElemWhen: void setTest(org.apache.xpath.XPath)>;sun.reflect.NativeMethodAccessorImpl.invoke;50;isAccessible=false;
Method.getDeclaringClass;<org.apache.xalan.templates.ElemWhen: void setTest(org.apache.xpath.XPath)>;sun.reflect.NativeMethodAccessorImpl.invoke;53;isAccessible=false;
Method.getDeclaringClass;<org.apache.xalan.templates.ElemWithParam: void setName(org.apache.xml.utils.QName)>;sun.reflect.NativeMethodAccessorImpl.invoke;50;isAccessible=false;
Method.getDeclaringClass;<org.apache.xalan.templates.ElemWithParam: void setName(org.apache.xml.utils.QName)>;sun.reflect.NativeMethodAccessorImpl.invoke;53;isAccessible=false;
Method.getDeclaringClass;<org.apache.xalan.templates.ElemWithParam: void setSelect(org.apache.xpath.XPath)>;sun.reflect.NativeMethodAccessorImpl.invoke;50;isAccessible=false;
Method.getDeclaringClass;<org.apache.xalan.templates.ElemWithParam: void setSelect(org.apache.xpath.XPath)>;sun.reflect.NativeMethodAccessorImpl.invoke;53;isAccessible=false;
Method.getDeclaringClass;<org.apache.xalan.transformer.TransformerImpl: javax.xml.transform.ErrorListener getErrorListener()>;sun.reflect.NativeMethodAccessorImpl.invoke;50;isAccessible=false;
Method.getDeclaringClass;<org.apache.xalan.transformer.TransformerImpl: javax.xml.transform.ErrorListener getErrorListener()>;sun.reflect.NativeMethodAccessorImpl.invoke;53;isAccessible=false;
Method.getModifiers;<Harness: void main(java.lang.String[])>;sun.launcher.LauncherHelper.validateMainClass;557;isAccessible=false;
Method.getModifiers;<org.apache.xalan.templates.ElemApplyTemplates: void setMode(org.apache.xml.utils.QName)>;sun.reflect.NativeMethodAccessorImpl.invoke;58;isAccessible=false;
Method.getModifiers;<org.apache.xalan.templates.ElemAttribute: void setName(org.apache.xalan.templates.AVT)>;sun.reflect.NativeMethodAccessorImpl.invoke;58;isAccessible=false;
Method.getModifiers;<org.apache.xalan.templates.ElemCallTemplate: void setName(org.apache.xml.utils.QName)>;sun.reflect.NativeMethodAccessorImpl.invoke;58;isAccessible=false;
Method.getModifiers;<org.apache.xalan.templates.ElemForEach: void setSelect(org.apache.xpath.XPath)>;sun.reflect.NativeMethodAccessorImpl.invoke;58;isAccessible=false;
Method.getModifiers;<org.apache.xalan.templates.ElemIf: void setTest(org.apache.xpath.XPath)>;sun.reflect.NativeMethodAccessorImpl.invoke;58;isAccessible=false;
Method.getModifiers;<org.apache.xalan.templates.ElemLiteralResult: void addLiteralResultAttribute(org.apache.xalan.templates.AVT)>;sun.reflect.NativeMethodAccessorImpl.invoke;58;isAccessible=false;
Method.getModifiers;<org.apache.xalan.templates.ElemTemplate: void setMatch(org.apache.xpath.XPath)>;sun.reflect.NativeMethodAccessorImpl.invoke;58;isAccessible=false;
Method.getModifiers;<org.apache.xalan.templates.ElemTemplate: void setMode(org.apache.xml.utils.QName)>;sun.reflect.NativeMethodAccessorImpl.invoke;58;isAccessible=false;
Method.getModifiers;<org.apache.xalan.templates.ElemValueOf: void setSelect(org.apache.xpath.XPath)>;sun.reflect.NativeMethodAccessorImpl.invoke;58;isAccessible=false;
Method.getModifiers;<org.apache.xalan.templates.ElemWhen: void setTest(org.apache.xpath.XPath)>;sun.reflect.NativeMethodAccessorImpl.invoke;58;isAccessible=false;
Method.getModifiers;<org.apache.xalan.templates.ElemWithParam: void setName(org.apache.xml.utils.QName)>;sun.reflect.NativeMethodAccessorImpl.invoke;58;isAccessible=false;
Method.getModifiers;<org.apache.xalan.templates.ElemWithParam: void setSelect(org.apache.xpath.XPath)>;sun.reflect.NativeMethodAccessorImpl.invoke;58;isAccessible=false;
Method.getModifiers;<org.apache.xalan.transformer.TransformerImpl: javax.xml.transform.ErrorListener getErrorListener()>;sun.reflect.NativeMethodAccessorImpl.invoke;58;isAccessible=false;
Method.getName;<Harness: void main(java.lang.String[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.processor.ProcessorOutputElem: void addLiteralResultAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.processor.ProcessorOutputElem: void setCdataSectionElements(java.util.Vector)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.processor.ProcessorOutputElem: void setDoctypePublic(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.processor.ProcessorOutputElem: void setDoctypeSystem(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.processor.ProcessorOutputElem: void setEncoding(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.processor.ProcessorOutputElem: void setForeignAttr(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.processor.ProcessorOutputElem: void setIndent(boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.processor.ProcessorOutputElem: void setMediaType(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.processor.ProcessorOutputElem: void setMethod(org.apache.xml.utils.QName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.processor.ProcessorOutputElem: void setOmitXmlDeclaration(boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.processor.ProcessorOutputElem: void setStandalone(boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.processor.ProcessorOutputElem: void setVersion(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.processor.ProcessorOutputElem: void startElement(org.apache.xalan.processor.StylesheetHandler,java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.processor.WhitespaceInfoPaths: void clearElements()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.processor.WhitespaceInfoPaths: void setElements(java.util.Vector)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemApplyTemplates: int getXSLToken()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemApplyTemplates: java.lang.String getNodeName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemApplyTemplates: org.apache.xml.utils.QName getMode()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemApplyTemplates: void compose(org.apache.xalan.templates.StylesheetRoot)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemApplyTemplates: void execute(org.apache.xalan.transformer.TransformerImpl)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemApplyTemplates: void setIsDefaultTemplate(boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemApplyTemplates: void setMode(org.apache.xml.utils.QName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemApplyTemplates: void setMode(org.apache.xml.utils.QName)>;sun.reflect.NativeMethodAccessorImpl.invoke;54;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemApplyTemplates: void transformSelectedNodes(org.apache.xalan.transformer.TransformerImpl)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemAttribute: int getXSLToken()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemAttribute: java.lang.String getNodeName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemAttribute: org.apache.xalan.templates.ElemTemplateElement appendChild(org.apache.xalan.templates.ElemTemplateElement)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemAttribute: void setName(org.apache.xalan.templates.AVT)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemAttribute: void setName(org.apache.xalan.templates.AVT)>;sun.reflect.NativeMethodAccessorImpl.invoke;54;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemCallTemplate: int getParamElemCount()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemCallTemplate: int getXSLToken()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemCallTemplate: java.lang.String getNodeName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemCallTemplate: org.apache.xalan.templates.ElemTemplateElement appendChild(org.apache.xalan.templates.ElemTemplateElement)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemCallTemplate: org.apache.xalan.templates.ElemWithParam getParamElem(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemCallTemplate: org.apache.xml.utils.QName getName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemCallTemplate: void callChildVisitors(org.apache.xalan.templates.XSLTVisitor,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemCallTemplate: void compose(org.apache.xalan.templates.StylesheetRoot)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemCallTemplate: void endCompose(org.apache.xalan.templates.StylesheetRoot)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemCallTemplate: void execute(org.apache.xalan.transformer.TransformerImpl)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemCallTemplate: void setName(org.apache.xml.utils.QName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemCallTemplate: void setName(org.apache.xml.utils.QName)>;sun.reflect.NativeMethodAccessorImpl.invoke;54;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemCallTemplate: void setParamElem(org.apache.xalan.templates.ElemWithParam)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemForEach: int getSortElemCount()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemForEach: int getXSLToken()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemForEach: java.lang.String getNodeName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemForEach: org.apache.xalan.templates.ElemSort getSortElem(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemForEach: org.apache.xalan.templates.ElemTemplateElement appendChild(org.apache.xalan.templates.ElemTemplateElement)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemForEach: org.apache.xml.dtm.DTMIterator sortNodes(org.apache.xpath.XPathContext,java.util.Vector,org.apache.xml.dtm.DTMIterator)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemForEach: org.apache.xpath.Expression getExpression()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemForEach: org.apache.xpath.Expression getSelect()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemForEach: void callChildVisitors(org.apache.xalan.templates.XSLTVisitor,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemForEach: void compose(org.apache.xalan.templates.StylesheetRoot)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemForEach: void endCompose(org.apache.xalan.templates.StylesheetRoot)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemForEach: void execute(org.apache.xalan.transformer.TransformerImpl)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemForEach: void setExpression(org.apache.xpath.Expression)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemForEach: void setSelect(org.apache.xpath.XPath)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemForEach: void setSelect(org.apache.xpath.XPath)>;sun.reflect.NativeMethodAccessorImpl.invoke;54;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemForEach: void setSortElem(org.apache.xalan.templates.ElemSort)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemForEach: void transformSelectedNodes(org.apache.xalan.transformer.TransformerImpl)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemIf: int getXSLToken()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemIf: java.lang.String getNodeName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemIf: org.apache.xpath.XPath getTest()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemIf: void compose(org.apache.xalan.templates.StylesheetRoot)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemIf: void execute(org.apache.xalan.transformer.TransformerImpl)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemIf: void setTest(org.apache.xpath.XPath)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemIf: void setTest(org.apache.xpath.XPath)>;sun.reflect.NativeMethodAccessorImpl.invoke;54;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: boolean containsExcludeResultPrefix(java.lang.String,java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: boolean containsExtensionElementURI(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: boolean getIsLiteralResultAsStylesheet()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: int getExtensionElementPrefixCount()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: int getXSLToken()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: java.lang.String getAttribute(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: java.lang.String getExtensionElementPrefix(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: java.lang.String getLocalName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: java.lang.String getNamespace()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: java.lang.String getNodeName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: java.lang.String getPrefix()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: java.lang.String getRawName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: java.lang.String getVersion()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: java.util.Iterator enumerateLiteralResultAttributes()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: org.apache.xalan.templates.AVT getLiteralResultAttribute(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: org.apache.xalan.templates.AVT getLiteralResultAttributeNS(java.lang.String,java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: org.w3c.dom.NamedNodeMap getAttributes()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: void addLiteralResultAttribute(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: void addLiteralResultAttribute(org.apache.xalan.templates.AVT)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: void addLiteralResultAttribute(org.apache.xalan.templates.AVT)>;sun.reflect.NativeMethodAccessorImpl.invoke;54;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: void compose(org.apache.xalan.templates.StylesheetRoot)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: void execute(org.apache.xalan.transformer.TransformerImpl)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: void resolvePrefixTables()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: void setExcludeResultPrefixes(org.apache.xml.utils.StringVector)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: void setExtensionElementPrefixes(org.apache.xml.utils.StringVector)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: void setIsLiteralResultAsStylesheet(boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: void setLocalName(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: void setNamespace(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: void setRawName(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: void setVersion(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: void setXmlSpace(org.apache.xalan.templates.AVT)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemLiteralResult: void throwDOMException(short,java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemMessage: boolean getTerminate()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemMessage: int getXSLToken()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemMessage: java.lang.String getNodeName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemMessage: void execute(org.apache.xalan.transformer.TransformerImpl)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemMessage: void setTerminate(boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemNumber: int getLevel()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemNumber: int getPreviousNode(org.apache.xpath.XPathContext,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemNumber: int getTargetNode(org.apache.xpath.XPathContext,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemNumber: int getXSLToken()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemNumber: java.lang.String getNodeName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT getFormat()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT getGroupingSeparator()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT getGroupingSize()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT getLang()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT getLetterValue()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.ElemTemplateElement appendChild(org.apache.xalan.templates.ElemTemplateElement)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath getCount()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath getFrom()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath getValue()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemNumber: void callChildVisitors(org.apache.xalan.templates.XSLTVisitor,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemNumber: void compose(org.apache.xalan.templates.StylesheetRoot)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemNumber: void execute(org.apache.xalan.transformer.TransformerImpl)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemNumber: void setCount(org.apache.xpath.XPath)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemNumber: void setFormat(org.apache.xalan.templates.AVT)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemNumber: void setFrom(org.apache.xpath.XPath)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemNumber: void setGroupingSeparator(org.apache.xalan.templates.AVT)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemNumber: void setGroupingSize(org.apache.xalan.templates.AVT)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemNumber: void setLang(org.apache.xalan.templates.AVT)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemNumber: void setLetterValue(org.apache.xalan.templates.AVT)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemNumber: void setLevel(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemNumber: void setValue(org.apache.xpath.XPath)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemParam: int getXSLToken()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemParam: java.lang.String getNodeName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemParam: void compose(org.apache.xalan.templates.StylesheetRoot)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemParam: void execute(org.apache.xalan.transformer.TransformerImpl)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemTemplate: double getPriority()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemTemplate: int getXSLToken()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemTemplate: java.lang.String getNodeName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemTemplate: java.lang.String getPublicId()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemTemplate: java.lang.String getSystemId()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemTemplate: org.apache.xalan.templates.Stylesheet getStylesheet()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemTemplate: org.apache.xalan.templates.StylesheetComposed getStylesheetComposed()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemTemplate: org.apache.xalan.templates.StylesheetRoot getStylesheetRoot()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemTemplate: org.apache.xml.utils.QName getMode()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemTemplate: org.apache.xml.utils.QName getName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemTemplate: org.apache.xpath.XPath getMatch()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemTemplate: void compose(org.apache.xalan.templates.StylesheetRoot)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemTemplate: void endCompose(org.apache.xalan.templates.StylesheetRoot)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemTemplate: void execute(org.apache.xalan.transformer.TransformerImpl)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemTemplate: void recompose(org.apache.xalan.templates.StylesheetRoot)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemTemplate: void setLocaterInfo(javax.xml.transform.SourceLocator)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemTemplate: void setMatch(org.apache.xpath.XPath)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemTemplate: void setMatch(org.apache.xpath.XPath)>;sun.reflect.NativeMethodAccessorImpl.invoke;54;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemTemplate: void setMode(org.apache.xml.utils.QName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemTemplate: void setMode(org.apache.xml.utils.QName)>;sun.reflect.NativeMethodAccessorImpl.invoke;54;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemTemplate: void setName(org.apache.xml.utils.QName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemTemplate: void setPriority(double)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemTemplate: void setStylesheet(org.apache.xalan.templates.Stylesheet)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemText: boolean getDisableOutputEscaping()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemText: int getXSLToken()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemText: java.lang.String getNodeName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemText: org.apache.xalan.templates.ElemTemplateElement appendChild(org.apache.xalan.templates.ElemTemplateElement)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemText: void setDisableOutputEscaping(boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemValueOf: boolean getDisableOutputEscaping()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemValueOf: int getXSLToken()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemValueOf: java.lang.String getNodeName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemValueOf: org.apache.xalan.templates.ElemTemplateElement appendChild(org.apache.xalan.templates.ElemTemplateElement)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemValueOf: org.apache.xpath.XPath getSelect()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemValueOf: void compose(org.apache.xalan.templates.StylesheetRoot)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemValueOf: void execute(org.apache.xalan.transformer.TransformerImpl)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemValueOf: void setDisableOutputEscaping(boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemValueOf: void setSelect(org.apache.xpath.XPath)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemValueOf: void setSelect(org.apache.xpath.XPath)>;sun.reflect.NativeMethodAccessorImpl.invoke;54;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemVariable: boolean getIsTopLevel()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemVariable: boolean isPsuedoVar()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemVariable: int getIndex()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemVariable: int getXSLToken()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemVariable: java.lang.String getNodeName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemVariable: org.apache.xalan.templates.ElemTemplateElement appendChild(org.apache.xalan.templates.ElemTemplateElement)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemVariable: org.apache.xml.utils.QName getName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemVariable: org.apache.xpath.XPath getSelect()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemVariable: org.apache.xpath.objects.XObject getValue(org.apache.xalan.transformer.TransformerImpl,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemVariable: void compose(org.apache.xalan.templates.StylesheetRoot)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemVariable: void endCompose(org.apache.xalan.templates.StylesheetRoot)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemVariable: void execute(org.apache.xalan.transformer.TransformerImpl)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemVariable: void recompose(org.apache.xalan.templates.StylesheetRoot)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemVariable: void setIndex(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemVariable: void setIsTopLevel(boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemVariable: void setName(org.apache.xml.utils.QName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemVariable: void setParentElem(org.apache.xalan.templates.ElemTemplateElement)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemVariable: void setSelect(org.apache.xpath.XPath)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemWhen: int getXSLToken()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemWhen: java.lang.String getNodeName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemWhen: org.apache.xpath.XPath getTest()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemWhen: void compose(org.apache.xalan.templates.StylesheetRoot)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemWhen: void setTest(org.apache.xpath.XPath)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemWhen: void setTest(org.apache.xpath.XPath)>;sun.reflect.NativeMethodAccessorImpl.invoke;54;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemWithParam: int getXSLToken()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemWithParam: java.lang.String getNodeName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemWithParam: org.apache.xalan.templates.ElemTemplateElement appendChild(org.apache.xalan.templates.ElemTemplateElement)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemWithParam: org.apache.xml.utils.QName getName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemWithParam: org.apache.xpath.XPath getSelect()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemWithParam: org.apache.xpath.objects.XObject getValue(org.apache.xalan.transformer.TransformerImpl,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemWithParam: void compose(org.apache.xalan.templates.StylesheetRoot)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemWithParam: void setName(org.apache.xml.utils.QName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemWithParam: void setName(org.apache.xml.utils.QName)>;sun.reflect.NativeMethodAccessorImpl.invoke;54;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemWithParam: void setParentElem(org.apache.xalan.templates.ElemTemplateElement)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemWithParam: void setSelect(org.apache.xpath.XPath)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.ElemWithParam: void setSelect(org.apache.xpath.XPath)>;sun.reflect.NativeMethodAccessorImpl.invoke;54;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: boolean containsExcludeResultPrefix(java.lang.String,java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: boolean containsExtensionElementURI(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: boolean getCompatibleMode()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: boolean isAggregatedType()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: boolean isRoot()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: int getAttributeSetCount()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: int getDecimalFormatCount()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: int getExcludeResultPrefixCount()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: int getExtensionElementPrefixCount()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: int getImportCount()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: int getIncludeCount()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: int getKeyCount()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: int getNamespaceAliasCount()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: int getOutputCount()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: int getPreserveSpaceCount()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: int getStripSpaceCount()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: int getTemplateCount()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: int getVariableOrParamCount()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: int getXSLToken()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: java.lang.Object getNonXslTopLevel(org.apache.xml.utils.QName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: java.lang.String getExcludeResultPrefix(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: java.lang.String getExtensionElementPrefix(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: java.lang.String getHref()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: java.lang.String getId()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: java.lang.String getNodeName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: java.lang.String getVersion()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: java.lang.String getXmlnsXsl()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: org.apache.xalan.templates.DecimalFormatProperties getDecimalFormat(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: org.apache.xalan.templates.DecimalFormatProperties getDecimalFormat(org.apache.xml.utils.QName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: org.apache.xalan.templates.ElemAttributeSet getAttributeSet(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: org.apache.xalan.templates.ElemParam getParam(org.apache.xml.utils.QName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: org.apache.xalan.templates.ElemTemplate getTemplate(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: org.apache.xalan.templates.ElemVariable getVariable(org.apache.xml.utils.QName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: org.apache.xalan.templates.ElemVariable getVariableOrParam(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: org.apache.xalan.templates.ElemVariable getVariableOrParam(org.apache.xml.utils.QName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: org.apache.xalan.templates.KeyDeclaration getKey(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: org.apache.xalan.templates.NamespaceAlias getNamespaceAlias(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: org.apache.xalan.templates.OutputProperties getOutput(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: org.apache.xalan.templates.Stylesheet getInclude(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: org.apache.xalan.templates.Stylesheet getStylesheet()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: org.apache.xalan.templates.Stylesheet getStylesheetParent()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: org.apache.xalan.templates.StylesheetComposed getImport(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: org.apache.xalan.templates.StylesheetComposed getStylesheetComposed()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: org.apache.xalan.templates.StylesheetRoot getStylesheetRoot()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: org.apache.xalan.templates.WhiteSpaceInfo getPreserveSpace(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: org.apache.xalan.templates.WhiteSpaceInfo getStripSpace(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: short getNodeType()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: void replaceTemplate(org.apache.xalan.templates.ElemTemplate,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: void setAttributeSet(org.apache.xalan.templates.ElemAttributeSet)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: void setDecimalFormat(org.apache.xalan.templates.DecimalFormatProperties)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: void setExcludeResultPrefixes(org.apache.xml.utils.StringVector)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: void setExtensionElementPrefixes(org.apache.xml.utils.StringVector)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: void setHref(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: void setId(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: void setImport(org.apache.xalan.templates.StylesheetComposed)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: void setInclude(org.apache.xalan.templates.Stylesheet)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: void setKey(org.apache.xalan.templates.KeyDeclaration)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: void setLocaterInfo(javax.xml.transform.SourceLocator)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: void setNamespaceAlias(org.apache.xalan.templates.NamespaceAlias)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: void setNonXslTopLevel(org.apache.xml.utils.QName,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: void setOutput(org.apache.xalan.templates.OutputProperties)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: void setParam(org.apache.xalan.templates.ElemParam)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: void setPreserveSpaces(org.apache.xalan.templates.WhiteSpaceInfo)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: void setStripSpaces(org.apache.xalan.templates.WhiteSpaceInfo)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: void setStylesheetParent(org.apache.xalan.templates.Stylesheet)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: void setStylesheetRoot(org.apache.xalan.templates.StylesheetRoot)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: void setTemplate(org.apache.xalan.templates.ElemTemplate)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: void setVariable(org.apache.xalan.templates.ElemVariable)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: void setVersion(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.Stylesheet: void setXmlnsXsl(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetComposed: boolean isAggregatedType()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetComposed: int getEndImportCountComposed()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetComposed: int getImportCountComposed()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetComposed: int getIncludeCountComposed()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetComposed: org.apache.xalan.templates.Stylesheet getIncludeComposed(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetComposed: org.apache.xalan.templates.StylesheetComposed getImportComposed(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetComposed: void recompose(java.util.Vector)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetComposed: void recomposeTemplates(boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: boolean canStripWhiteSpace()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: boolean getIncremental()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: boolean getOptimizer()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: boolean getSource_location()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: boolean isOutputMethodSet()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: boolean isRoot()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: boolean isSecureProcessing()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: boolean shouldCheckWhitespace()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: boolean shouldStripWhiteSpace(org.apache.xpath.XPathContext,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: int getGlobalImportCount()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: int getImportNumber(org.apache.xalan.templates.StylesheetComposed)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: java.lang.String getExtensionHandlerClass()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: java.lang.String setExtensionHandlerClass(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: java.text.DecimalFormatSymbols getDecimalFormatComposed(org.apache.xml.utils.QName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: java.util.ArrayList getAttributeSetComposed(org.apache.xml.utils.QName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: java.util.HashMap getAvailableElements()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: java.util.Properties getDefaultOutputProps()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: java.util.Properties getOutputProperties()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: java.util.Vector getExtensions()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: java.util.Vector getKeysComposed()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: java.util.Vector getVariablesAndParamsComposed()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: javax.xml.transform.Transformer newTransformer()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.extensions.ExtensionNamespacesManager getExtensionNamespacesManager()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.ElemTemplate getDefaultRootRule()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.ElemTemplate getDefaultRule()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.ElemTemplate getDefaultTextRule()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.ElemTemplate getStartRule()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.ElemTemplate getTemplateComposed(org.apache.xml.utils.QName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.ElemTemplate getTemplateComposed(org.apache.xpath.XPathContext,int,org.apache.xml.utils.QName,boolean,org.apache.xml.dtm.DTM)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.ElemTemplate getTemplateComposed(org.apache.xpath.XPathContext,int,org.apache.xml.utils.QName,int,int,boolean,org.apache.xml.dtm.DTM)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.ElemVariable getVariableOrParamComposed(org.apache.xml.utils.QName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.NamespaceAlias getNamespaceAliasComposed(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.OutputProperties getOutputComposed()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.StylesheetComposed getGlobalImport(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.TemplateList getTemplateListComposed()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.WhiteSpaceInfo getWhiteSpaceInfo(org.apache.xpath.XPathContext,int,org.apache.xml.dtm.DTM)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: void recompose()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: void setIncremental(boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: void setOptimizer(boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: void setSecureProcessing(boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: void setSource_location(boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.templates.StylesheetRoot: void setTemplateListComposed(org.apache.xalan.templates.TemplateList)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: boolean applyTemplateToNode(org.apache.xalan.templates.ElemTemplateElement,org.apache.xalan.templates.ElemTemplate,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: boolean currentFuncResultSeen()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: boolean currentTemplateRuleIsNull()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: boolean elementAvailable(java.lang.String,java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: boolean functionAvailable(java.lang.String,java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: boolean getDebug()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: boolean getFeature(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: boolean getIncremental()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: boolean getOptimize()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: boolean getProperty(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: boolean getQuietConflictWarnings()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: boolean getSource_location()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: boolean hasTraceListeners()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: boolean hasTransformThreadErrorCatcher()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: boolean isParserEventsOnMain()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: boolean isRecursiveAttrSet(org.apache.xalan.templates.ElemAttributeSet)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: boolean isTransformDone()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: int getCurrentNode()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: int getCurrentTemplateElementsCount()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: int getMatchedNode()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: int getRecursionLimit()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: int transformToGlobalRTF(org.apache.xalan.templates.ElemTemplateElement)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: int transformToRTF(org.apache.xalan.templates.ElemTemplateElement)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: java.lang.Exception getExceptionThrown()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: java.lang.Object extFunction(java.lang.String,java.lang.String,java.util.Vector,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: java.lang.Object extFunction(org.apache.xpath.functions.FuncExtFunction,java.util.Vector)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: java.lang.Object getParameter(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: java.lang.Object popCurrentFuncResult()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: java.lang.String getBaseURLOfSource()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: java.lang.String getOutputProperty(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: java.lang.String getOutputPropertyNoDefault(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: java.lang.String transformToString(org.apache.xalan.templates.ElemTemplateElement)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: java.lang.Thread getTransformThread()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: java.util.Properties getOutputProperties()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: java.util.Vector getElementCallstack()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: java.util.Vector getTemplateCallstack()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: java.util.Vector processSortKeys(org.apache.xalan.templates.ElemForEach,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: javax.xml.transform.ErrorListener getErrorListener()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: javax.xml.transform.ErrorListener getErrorListener()>;sun.reflect.NativeMethodAccessorImpl.invoke;54;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: javax.xml.transform.Result getOutputTarget()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: javax.xml.transform.Transformer getTransformer()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: javax.xml.transform.URIResolver getURIResolver()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: org.apache.xalan.extensions.ExtensionsTable getExtensionsTable()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: org.apache.xalan.templates.ElemTemplate getCurrentTemplate()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: org.apache.xalan.templates.ElemTemplate getMatchedTemplate()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: org.apache.xalan.templates.ElemTemplateElement getCurrentElement()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: org.apache.xalan.templates.OutputProperties getOutputFormat()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: org.apache.xalan.templates.StylesheetRoot getStylesheet()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: org.apache.xalan.trace.TraceManager getTraceManager()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: org.apache.xalan.transformer.CountersTable getCountersTable()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: org.apache.xalan.transformer.KeyManager getKeyManager()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: org.apache.xalan.transformer.MsgMgr getMsgMgr()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: org.apache.xalan.transformer.StackGuard getStackGuard()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: org.apache.xalan.transformer.TransformSnapshot getSnapshot()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: org.apache.xml.dtm.DTMIterator getContextNodeList()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: org.apache.xml.serializer.SerializationHandler createSerializationHandler(javax.xml.transform.Result)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: org.apache.xml.serializer.SerializationHandler createSerializationHandler(javax.xml.transform.Result,org.apache.xalan.templates.OutputProperties)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: org.apache.xml.serializer.SerializationHandler getResultTreeHandler()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: org.apache.xml.serializer.SerializationHandler getSerializationHandler()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: org.apache.xml.utils.ObjectPool getStringWriterPool()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: org.apache.xml.utils.ObjectStack getCurrentTemplateElements()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: org.apache.xml.utils.QName getMode()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: org.apache.xpath.XPathContext getXPathContext()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: org.xml.sax.ContentHandler getContentHandler()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: org.xml.sax.ContentHandler getInputContentHandler()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: org.xml.sax.ContentHandler getInputContentHandler(boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: org.xml.sax.ext.DeclHandler getInputDeclHandler()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: org.xml.sax.ext.LexicalHandler getInputLexicalHandler()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: short getShouldStripSpace(int,org.apache.xml.dtm.DTM)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void clearParameters()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void executeChildTemplates(org.apache.xalan.templates.ElemTemplateElement,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void executeChildTemplates(org.apache.xalan.templates.ElemTemplateElement,org.w3c.dom.Node,org.apache.xml.utils.QName,org.xml.sax.ContentHandler)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void executeChildTemplates(org.apache.xalan.templates.ElemTemplateElement,org.xml.sax.ContentHandler)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void executeFromSnapshot(org.apache.xalan.transformer.TransformSnapshot)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void fireGenerateEvent(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void fireGenerateEvent(int,char[],int,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void fireGenerateEvent(int,java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void fireGenerateEvent(int,java.lang.String,java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void fireGenerateEvent(int,java.lang.String,org.xml.sax.Attributes)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void init(org.apache.xml.serializer.ToXMLSAXHandler,javax.xml.transform.Transformer,org.xml.sax.ContentHandler)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void popCurrentMatched()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void popCurrentTemplateRuleIsNull()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void popElemAttributeSet()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void popElemTemplateElement()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void popMode()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void pushCurrentFuncResult(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void pushCurrentTemplateRuleIsNull(boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void pushElemAttributeSet(org.apache.xalan.templates.ElemAttributeSet)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void pushElemTemplateElement(org.apache.xalan.templates.ElemTemplateElement)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void pushMode(org.apache.xml.utils.QName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void pushPairCurrentMatched(org.apache.xalan.templates.ElemTemplateElement,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void reset()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void resetToStylesheet(org.apache.xalan.transformer.TransformSnapshot)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void run()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void runTransformThread()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void runTransformThread(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void runTransformThread(java.lang.Runnable)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void setBaseURLOfSource(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void setContentHandler(org.xml.sax.ContentHandler)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void setCurrentElement(org.apache.xalan.templates.ElemTemplateElement)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void setDebug(boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void setErrorListener(javax.xml.transform.ErrorListener)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void setExceptionThrown(java.lang.Exception)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void setIsTransformDone(boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void setOutputFormat(org.apache.xalan.templates.OutputProperties)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void setOutputProperties(java.util.Properties)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void setOutputProperty(java.lang.String,java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void setOutputTarget(javax.xml.transform.Result)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void setParameter(java.lang.String,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void setParameter(java.lang.String,java.lang.String,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void setParameters(java.util.Properties)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void setProperty(java.lang.String,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void setQuietConflictWarnings(boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void setRecursionLimit(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void setSerializationHandler(org.apache.xml.serializer.SerializationHandler)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void setShouldReset(boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void setSourceTreeDocForThread(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void setStylesheet(org.apache.xalan.templates.StylesheetRoot)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void setTransformThread(java.lang.Thread)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void setURIResolver(javax.xml.transform.URIResolver)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void setXMLSource(javax.xml.transform.Source)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void setXPathContext(org.apache.xpath.XPathContext)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void stopTransformation()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void transform(javax.xml.transform.Source)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void transform(javax.xml.transform.Source,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void transform(javax.xml.transform.Source,javax.xml.transform.Result)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void transform(javax.xml.transform.Source,javax.xml.transform.Result,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void transformNode(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void transformNode(int,javax.xml.transform.Result)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.xalan.transformer.TransformerImpl: void waitTransformThread()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.dacapo.xalan.XSLTBench: void createWorkers(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.dacapo.xalan.XSLTBench: void doWork(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.invoke;<org.apache.xalan.processor.ProcessorOutputElem: void setDoctypePublic(java.lang.String)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1626;isAccessible=false;
Method.invoke;<org.apache.xalan.processor.ProcessorOutputElem: void setEncoding(java.lang.String)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1626;isAccessible=false;
Method.invoke;<org.apache.xalan.processor.ProcessorOutputElem: void setIndent(boolean)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1626;isAccessible=false;
Method.invoke;<org.apache.xalan.processor.ProcessorOutputElem: void setMethod(org.apache.xml.utils.QName)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1626;isAccessible=false;
Method.invoke;<org.apache.xalan.processor.WhitespaceInfoPaths: void setElements(java.util.Vector)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1626;isAccessible=false;
Method.invoke;<org.apache.xalan.templates.ElemApplyTemplates: void setMode(org.apache.xml.utils.QName)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1626;isAccessible=false;
Method.invoke;<org.apache.xalan.templates.ElemAttribute: void setName(org.apache.xalan.templates.AVT)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1626;isAccessible=false;
Method.invoke;<org.apache.xalan.templates.ElemCallTemplate: void setName(org.apache.xml.utils.QName)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1626;isAccessible=false;
Method.invoke;<org.apache.xalan.templates.ElemForEach: void setSelect(org.apache.xpath.XPath)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1626;isAccessible=false;
Method.invoke;<org.apache.xalan.templates.ElemIf: void setTest(org.apache.xpath.XPath)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1626;isAccessible=false;
Method.invoke;<org.apache.xalan.templates.ElemLiteralResult: void addLiteralResultAttribute(org.apache.xalan.templates.AVT)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1626;isAccessible=false;
Method.invoke;<org.apache.xalan.templates.ElemMessage: void setTerminate(boolean)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1626;isAccessible=false;
Method.invoke;<org.apache.xalan.templates.ElemNumber: void setCount(org.apache.xpath.XPath)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1626;isAccessible=false;
Method.invoke;<org.apache.xalan.templates.ElemNumber: void setFormat(org.apache.xalan.templates.AVT)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1626;isAccessible=false;
Method.invoke;<org.apache.xalan.templates.ElemNumber: void setFrom(org.apache.xpath.XPath)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1626;isAccessible=false;
Method.invoke;<org.apache.xalan.templates.ElemNumber: void setLevel(int)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1626;isAccessible=false;
Method.invoke;<org.apache.xalan.templates.ElemTemplate: void setMatch(org.apache.xpath.XPath)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1626;isAccessible=false;
Method.invoke;<org.apache.xalan.templates.ElemTemplate: void setMode(org.apache.xml.utils.QName)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1626;isAccessible=false;
Method.invoke;<org.apache.xalan.templates.ElemTemplate: void setName(org.apache.xml.utils.QName)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1626;isAccessible=false;
Method.invoke;<org.apache.xalan.templates.ElemText: void setDisableOutputEscaping(boolean)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1626;isAccessible=false;
Method.invoke;<org.apache.xalan.templates.ElemValueOf: void setSelect(org.apache.xpath.XPath)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1626;isAccessible=false;
Method.invoke;<org.apache.xalan.templates.ElemVariable: void setName(org.apache.xml.utils.QName)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1626;isAccessible=false;
Method.invoke;<org.apache.xalan.templates.ElemVariable: void setSelect(org.apache.xpath.XPath)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1626;isAccessible=false;
Method.invoke;<org.apache.xalan.templates.ElemWhen: void setTest(org.apache.xpath.XPath)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1626;isAccessible=false;
Method.invoke;<org.apache.xalan.templates.ElemWithParam: void setName(org.apache.xml.utils.QName)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1626;isAccessible=false;
Method.invoke;<org.apache.xalan.templates.ElemWithParam: void setSelect(org.apache.xpath.XPath)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1626;isAccessible=false;
Method.invoke;<org.apache.xalan.templates.Stylesheet: void setExcludeResultPrefixes(org.apache.xml.utils.StringVector)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1626;isAccessible=false;
Method.invoke;<org.apache.xalan.templates.Stylesheet: void setVersion(java.lang.String)>;org.apache.xalan.processor.XSLTAttributeDef.setAttrValue;1626;isAccessible=false;
Method.invoke;<org.apache.xalan.transformer.TransformerImpl: javax.xml.transform.ErrorListener getErrorListener()>;org.apache.xpath.XPathContext.getErrorListener;550;isAccessible=false;
Method.invoke;<org.dacapo.xalan.XSLTBench: void createWorkers(int)>;org.dacapo.harness.Xalan.preIteration;52;isAccessible=false;
Method.invoke;<org.dacapo.xalan.XSLTBench: void doWork(int)>;org.dacapo.harness.Xalan.iterate;68;isAccessible=false;
