Array.newInstance;char[];sun.invoke.util.BytecodeDescriptor.parseSig;90;;
Array.newInstance;int[];sun.invoke.util.BytecodeDescriptor.parseSig;90;;
Array.newInstance;java.awt.event.MouseMotionListener[];java.awt.AWTEventMulticaster.getListeners;1029;;
Array.newInstance;java.awt.event.MouseMotionListener[];javax.swing.event.EventListenerList.getListeners;139;;
Array.newInstance;java.lang.Class[];java.util.AbstractCollection.toArray;179;;
Array.newInstance;java.lang.Class[];java.util.Arrays.copyOf;3212;;
Array.newInstance;java.lang.Class[];java.util.Arrays.copyOfRange;3484;;
Array.newInstance;java.lang.Class[];sun.invoke.util.BytecodeDescriptor.parseSig;90;;
Array.newInstance;java.lang.Object[];sun.invoke.util.BytecodeDescriptor.parseSig;90;;
Array.newInstance;java.lang.String[];java.util.AbstractCollection.toArray;179;;
Array.newInstance;java.lang.Thread[];java.util.Arrays.copyOf;3212;;
Array.newInstance;java.lang.invoke.LambdaForm$BasicType[];java.util.Arrays.copyOf;3212;;
Array.newInstance;java.lang.invoke.LambdaForm$BasicType[];sun.invoke.util.BytecodeDescriptor.parseSig;90;;
Array.newInstance;java.lang.invoke.LambdaForm$Name[];java.util.Arrays.copyOf;3212;;
Array.newInstance;java.lang.invoke.LambdaForm$Name[];sun.invoke.util.BytecodeDescriptor.parseSig;90;;
Array.newInstance;java.lang.invoke.MethodHandle[];java.util.Arrays.copyOf;3212;;
Class.forName;java.awt.EventQueue;sun.awt.SunToolkit.initEQ;123;;
Class.forName;java.net.Inet6AddressImpl;java.net.InetAddress.loadImpl;1474;;
Class.forName;java.util.logging.LoggingProxyImpl;sun.util.logging.LoggingSupport$1.run;54;;
Class.forName;javax.swing.plaf.BorderUIResource$EmptyBorderUIResource;sun.swing.SwingLazyValue.createValue;68;;
Class.forName;javax.swing.plaf.FontUIResource;sun.swing.SwingLazyValue.createValue;68;;
Class.forName;javax.swing.plaf.basic.BasicOptionPaneUI;javax.swing.SwingUtilities.loadSystemClass;1879;;
Class.forName;javax.swing.plaf.basic.BasicPanelUI;javax.swing.SwingUtilities.loadSystemClass;1879;;
Class.forName;javax.swing.plaf.metal.MetalBorders;sun.swing.SwingLazyValue.createValue;68;;
Class.forName;javax.swing.plaf.metal.MetalButtonUI;javax.swing.SwingUtilities.loadSystemClass;1879;;
Class.forName;javax.swing.plaf.metal.MetalLabelUI;javax.swing.SwingUtilities.loadSystemClass;1879;;
Class.forName;sun.awt.X11.XToolkit;java.awt.Toolkit$2.run;860;;
Class.forName;sun.awt.X11FontManager;sun.font.FontManagerFactory$1.run;82;;
Class.forName;sun.awt.X11GraphicsEnvironment;java.awt.GraphicsEnvironment.createGE;103;;
Class.forName;sun.font.FreetypeFontScaler;sun.font.FontScaler.<clinit>;98;;
Class.forName;sun.reflect.misc.Trampoline;sun.reflect.misc.MethodUtil.getTrampolineClass;404;;
Class.forName;sun.util.logging.PlatformLogger$DefaultLoggerProxy;sun.util.logging.PlatformLogger.<clinit>;173;;
Class.forName;sun.util.logging.PlatformLogger$JavaLoggerProxy;sun.util.logging.PlatformLogger.<clinit>;176;;
Class.getDeclaredField;<java.awt.Component: sun.awt.AppContext appContext>;javax.swing.ImageIcon$1.run;108;isAccessible=false;
Class.getDeclaredField;<java.lang.Thread: int threadLocalRandomProbe>;java.util.concurrent.ThreadLocalRandom.<clinit>;1064;isAccessible=false;
Class.getDeclaredField;<java.lang.Thread: int threadLocalRandomProbe>;java.util.concurrent.locks.LockSupport.<clinit>;408;isAccessible=false;
Class.getDeclaredField;<java.lang.Thread: int threadLocalRandomSecondarySeed>;java.util.concurrent.ConcurrentSkipListMap.<clinit>;3609;isAccessible=false;
Class.getDeclaredField;<java.lang.Thread: int threadLocalRandomSecondarySeed>;java.util.concurrent.ThreadLocalRandom.<clinit>;1066;isAccessible=false;
Class.getDeclaredField;<java.lang.Thread: int threadLocalRandomSecondarySeed>;java.util.concurrent.locks.LockSupport.<clinit>;410;isAccessible=false;
Class.getDeclaredField;<java.lang.Thread: java.lang.Object parkBlocker>;java.util.concurrent.locks.LockSupport.<clinit>;404;isAccessible=false;
Class.getDeclaredField;<java.lang.Thread: long threadLocalRandomSeed>;java.util.concurrent.ThreadLocalRandom.<clinit>;1062;isAccessible=false;
Class.getDeclaredField;<java.lang.Thread: long threadLocalRandomSeed>;java.util.concurrent.locks.LockSupport.<clinit>;406;isAccessible=false;
Class.getDeclaredField;<java.lang.invoke.BoundMethodHandle$Species_L3: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;java.lang.invoke.BoundMethodHandle$Factory.setSpeciesDataToConcreteBMHClass;790;isAccessible=false;
Class.getDeclaredField;<java.lang.invoke.BoundMethodHandle$Species_L4: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;java.lang.invoke.BoundMethodHandle$Factory.setSpeciesDataToConcreteBMHClass;790;isAccessible=false;
Class.getDeclaredField;<java.lang.invoke.BoundMethodHandle$Species_LL: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;java.lang.invoke.BoundMethodHandle$Factory.setSpeciesDataToConcreteBMHClass;790;isAccessible=false;
Class.getDeclaredField;<java.lang.invoke.CallSite: java.lang.invoke.MethodHandle target>;java.lang.invoke.CallSite.<clinit>;252;isAccessible=false;
Class.getDeclaredField;<java.lang.invoke.MethodHandle: java.lang.invoke.LambdaForm form>;java.lang.invoke.MethodHandle.<clinit>;1451;isAccessible=false;
Class.getDeclaredField;<java.lang.invoke.MethodType: java.lang.Class rtype>;java.lang.invoke.MethodType.<clinit>;1167;isAccessible=false;
Class.getDeclaredField;<java.lang.invoke.MethodType: java.lang.Class[] ptypes>;java.lang.invoke.MethodType.<clinit>;1169;isAccessible=false;
Class.getDeclaredField;<java.net.Inet6Address: java.net.Inet6Address$Inet6AddressHolder holder6>;java.net.Inet6Address.<clinit>;585;isAccessible=false;
Class.getDeclaredField;<java.net.InetAddress: java.net.InetAddress$InetAddressHolder holder>;java.net.InetAddress.<clinit>;1514;isAccessible=false;
Class.getDeclaredField;<java.util.Random: java.util.concurrent.atomic.AtomicLong seed>;java.util.Random.<clinit>;1221;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.ConcurrentSkipListMap$Index: java.util.concurrent.ConcurrentSkipListMap$Index right>;java.util.concurrent.ConcurrentSkipListMap$Index.<clinit>;627;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object value>;java.util.concurrent.ConcurrentSkipListMap$Node.<clinit>;547;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.ConcurrentSkipListMap$Node: java.util.concurrent.ConcurrentSkipListMap$Node next>;java.util.concurrent.ConcurrentSkipListMap$Node.<clinit>;549;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$HeadIndex head>;java.util.concurrent.ConcurrentSkipListMap.<clinit>;3606;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.ConcurrentSkipListSet: java.util.concurrent.ConcurrentNavigableMap m>;java.util.concurrent.ConcurrentSkipListSet.<clinit>;521;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.atomic.AtomicBoolean: int value>;java.util.concurrent.atomic.AtomicBoolean.<clinit>;59;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int waitStatus>;java.util.concurrent.locks.AbstractQueuedSynchronizer.<clinit>;2276;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node next>;java.util.concurrent.locks.AbstractQueuedSynchronizer.<clinit>;2278;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.locks.AbstractQueuedSynchronizer: int state>;java.util.concurrent.locks.AbstractQueuedSynchronizer.<clinit>;2270;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node head>;java.util.concurrent.locks.AbstractQueuedSynchronizer.<clinit>;2272;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node tail>;java.util.concurrent.locks.AbstractQueuedSynchronizer.<clinit>;2274;isAccessible=false;
Class.getDeclaredField;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;sun.util.logging.LoggingSupport$1.run;55;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.DelegatingMethodHandle: java.lang.invoke.MethodHandle getTarget()>;java.lang.invoke.DelegatingMethodHandle.<clinit>;159;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.DirectMethodHandle$Interface: java.lang.Object checkReceiver(java.lang.Object)>;java.lang.invoke.DirectMethodHandle$Lazy.<clinit>;722;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.DirectMethodHandle: java.lang.Object allocateInstance(java.lang.Object)>;java.lang.invoke.DirectMethodHandle$Lazy.<clinit>;718;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.DirectMethodHandle: java.lang.Object checkBase(java.lang.Object)>;java.lang.invoke.DirectMethodHandle$Lazy.<clinit>;710;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.DirectMethodHandle: java.lang.Object checkCast(java.lang.Object,java.lang.Object)>;java.lang.invoke.DirectMethodHandle$Lazy.<clinit>;716;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.DirectMethodHandle: java.lang.Object constructorMethod(java.lang.Object)>;java.lang.invoke.DirectMethodHandle$Lazy.<clinit>;720;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.DirectMethodHandle: java.lang.Object internalMemberName(java.lang.Object)>;java.lang.invoke.DirectMethodHandle$Lazy.<clinit>;702;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.DirectMethodHandle: java.lang.Object internalMemberNameEnsureInit(java.lang.Object)>;java.lang.invoke.DirectMethodHandle$Lazy.<clinit>;704;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.DirectMethodHandle: java.lang.Object staticBase(java.lang.Object)>;java.lang.invoke.DirectMethodHandle$Lazy.<clinit>;712;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.DirectMethodHandle: long fieldOffset(java.lang.Object)>;java.lang.invoke.DirectMethodHandle$Lazy.<clinit>;708;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.DirectMethodHandle: long staticOffset(java.lang.Object)>;java.lang.invoke.DirectMethodHandle$Lazy.<clinit>;714;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.DirectMethodHandle: void ensureInitialized(java.lang.Object)>;java.lang.invoke.DirectMethodHandle$Lazy.<clinit>;706;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.Invokers: java.lang.Object checkGenericType(java.lang.Object,java.lang.Object)>;java.lang.invoke.Invokers.<clinit>;425;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.Invokers: java.lang.Object getCallSiteTarget(java.lang.Object)>;java.lang.invoke.Invokers.<clinit>;427;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.Invokers: void checkCustomized(java.lang.Object)>;java.lang.invoke.Invokers.<clinit>;429;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.Invokers: void checkExactType(java.lang.Object,java.lang.Object)>;java.lang.invoke.Invokers.<clinit>;423;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.MethodHandleImpl: boolean profileBoolean(boolean,int[])>;java.lang.invoke.MethodHandleImpl$Lazy.<clinit>;618;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.MethodHandleImpl: java.lang.Object guardWithCatch(java.lang.invoke.MethodHandle,java.lang.Class,java.lang.invoke.MethodHandle,java.lang.Object[])>;java.lang.invoke.MethodHandleImpl$Lazy.<clinit>;615;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.MethodHandleImpl: sun.invoke.empty.Empty throwException(java.lang.Throwable)>;java.lang.invoke.MethodHandleImpl$Lazy.<clinit>;617;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.MethodHandleImpl: void checkSpreadArgument(java.lang.Object,int)>;java.lang.invoke.MethodHandleImpl$Lazy.<clinit>;614;isAccessible=false;
Class.getDeclaredMethod;<sun.reflect.misc.Trampoline: java.lang.Object invoke(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>;sun.reflect.misc.MethodUtil$1.run;306;isAccessible=false;
Class.getField;<java.awt.event.KeyEvent: int VK_ESCAPE>;java.awt.AWTKeyStroke.getVKValue;617;isAccessible=false;
Class.getField;<java.awt.event.KeyEvent: int VK_SPACE>;java.awt.AWTKeyStroke.getVKValue;617;isAccessible=false;
Class.getMethod;<com.github.dcevm.installer.Main: void main(java.lang.String[])>;sun.launcher.LauncherHelper.validateMainClass;670;isAccessible=false;
Class.getMethod;<javax.swing.plaf.basic.BasicOptionPaneUI: javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)>;javax.swing.UIDefaults.getUI;767;isAccessible=false;
Class.getMethod;<javax.swing.plaf.basic.BasicPanelUI: javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)>;javax.swing.UIDefaults.getUI;767;isAccessible=false;
Class.getMethod;<javax.swing.plaf.metal.MetalBorders: javax.swing.border.Border getButtonBorder()>;sun.swing.SwingLazyValue.createValue;71;isAccessible=false;
Class.getMethod;<javax.swing.plaf.metal.MetalButtonUI: javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)>;javax.swing.UIDefaults.getUI;767;isAccessible=false;
Class.getMethod;<javax.swing.plaf.metal.MetalLabelUI: javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)>;javax.swing.UIDefaults.getUI;767;isAccessible=false;
Class.getMethod;<sun.font.EAttribute: sun.font.EAttribute[] values()>;java.lang.Class.getEnumConstantsShared;;isAccessible=false;
Class.newInstance;com.sun.swing.internal.plaf.basic.resources.basic;java.util.ResourceBundle$Control.newBundle;2662;;
Class.newInstance;com.sun.swing.internal.plaf.metal.resources.metal;java.util.ResourceBundle$Control.newBundle;2662;;
Class.newInstance;java.awt.EventQueue;sun.awt.SunToolkit.initEQ;123;;
Class.newInstance;java.net.Inet6AddressImpl;java.net.InetAddress.loadImpl;1474;;
Class.newInstance;sun.awt.X11.XToolkit;java.awt.Toolkit$2.run;873;;
Class.newInstance;sun.awt.X11FontManager;sun.font.FontManagerFactory$1.run;83;;
Class.newInstance;sun.awt.X11GraphicsEnvironment;java.awt.GraphicsEnvironment.createGE;110;;
Class.newInstance;sun.awt.resources.awt;java.util.ResourceBundle$Control.newBundle;2662;;
Class.newInstance;sun.reflect.GeneratedMethodAccessor$HASHED$3790c1d77ea6b3c8b9c73240f2b0b9b241de1185;sun.reflect.MethodAccessorGenerator$1.run;403;;
Constructor.getModifiers;<com.sun.swing.internal.plaf.basic.resources.basic: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<com.sun.swing.internal.plaf.metal.resources.metal: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<java.awt.EventQueue: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<java.net.Inet6AddressImpl: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.awt.X11.XToolkit: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.awt.X11FontManager: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.awt.X11GraphicsEnvironment: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.awt.resources.awt: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedMethodAccessor$HASHED$3790c1d77ea6b3c8b9c73240f2b0b9b241de1185: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<com.sun.swing.internal.plaf.basic.resources.basic: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<com.sun.swing.internal.plaf.metal.resources.metal: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<java.awt.AWTKeyStroke: void <init>()>;java.awt.AWTKeyStroke.getCachedStroke;263;isAccessible=true;
Constructor.newInstance;<java.awt.EventQueue: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<java.awt.GraphicsEnvironment$$Lambda$1.284720968: void <init>()>;java.lang.invoke.InnerClassLambdaMetafactory.buildCallSite;215;isAccessible=true;
Constructor.newInstance;<java.net.Inet6AddressImpl: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<javax.swing.KeyStroke: void <init>()>;java.awt.AWTKeyStroke.getCachedStroke;263;isAccessible=true;
Constructor.newInstance;<javax.swing.KeyStroke: void <init>()>;java.awt.AWTKeyStroke.registerSubclass;203;isAccessible=true;
Constructor.newInstance;<javax.swing.plaf.BorderUIResource$EmptyBorderUIResource: void <init>(int,int,int,int)>;sun.swing.SwingLazyValue.createValue;78;isAccessible=true;
Constructor.newInstance;<javax.swing.plaf.FontUIResource: void <init>(java.lang.String,int,int)>;sun.swing.SwingLazyValue.createValue;78;isAccessible=true;
Constructor.newInstance;<javax.swing.plaf.metal.MetalLookAndFeel$$Lambda$2.1028214719: void <init>()>;java.lang.invoke.InnerClassLambdaMetafactory.buildCallSite;215;isAccessible=true;
Constructor.newInstance;<javax.swing.plaf.metal.MetalLookAndFeel$$Lambda$3.500977346: void <init>()>;java.lang.invoke.InnerClassLambdaMetafactory.buildCallSite;215;isAccessible=true;
Constructor.newInstance;<javax.swing.plaf.metal.MetalLookAndFeel$$Lambda$4.20132171: void <init>()>;java.lang.invoke.InnerClassLambdaMetafactory.buildCallSite;215;isAccessible=true;
Constructor.newInstance;<javax.swing.plaf.metal.MetalLookAndFeel$$Lambda$5.186370029: void <init>()>;java.lang.invoke.InnerClassLambdaMetafactory.buildCallSite;215;isAccessible=true;
Constructor.newInstance;<javax.swing.plaf.metal.MetalLookAndFeel$$Lambda$6.2094548358: void <init>()>;java.lang.invoke.InnerClassLambdaMetafactory.buildCallSite;215;isAccessible=true;
Constructor.newInstance;<javax.swing.plaf.metal.MetalLookAndFeel$$Lambda$7.51228289: void <init>()>;java.lang.invoke.InnerClassLambdaMetafactory.buildCallSite;215;isAccessible=true;
Constructor.newInstance;<javax.swing.plaf.metal.MetalLookAndFeel$$Lambda$8.455896770: void <init>()>;java.lang.invoke.InnerClassLambdaMetafactory.buildCallSite;215;isAccessible=true;
Constructor.newInstance;<sun.awt.X11.XToolkit: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.awt.X11FontManager: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.awt.X11GraphicsEnvironment: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.awt.resources.awt: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.font.FreetypeFontScaler: void <init>(sun.font.Font2D,int,boolean,int)>;sun.font.FontScaler.getScaler;128;isAccessible=false;
Constructor.newInstance;<sun.java2d.Disposer$$Lambda$10.1237514926: void <init>()>;java.lang.invoke.InnerClassLambdaMetafactory.buildCallSite;215;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedMethodAccessor$HASHED$3790c1d77ea6b3c8b9c73240f2b0b9b241de1185: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Field.get*;<java.awt.event.KeyEvent: int VK_ESCAPE>;java.awt.AWTKeyStroke.getVKValue;617;isAccessible=false;
Field.get*;<java.awt.event.KeyEvent: int VK_SPACE>;java.awt.AWTKeyStroke.getVKValue;617;isAccessible=false;
Field.get*;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;sun.util.logging.LoggingSupport$1.run;57;isAccessible=true;
Field.getDeclaringClass;<java.awt.Component: sun.awt.AppContext appContext>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<java.awt.event.KeyEvent: int VK_ESCAPE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;43;isAccessible=false;
Field.getDeclaringClass;<java.awt.event.KeyEvent: int VK_SPACE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;43;isAccessible=false;
Field.getDeclaringClass;<java.lang.invoke.BoundMethodHandle$Species_L3: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;43;isAccessible=false;
Field.getDeclaringClass;<java.lang.invoke.BoundMethodHandle$Species_L4: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;43;isAccessible=false;
Field.getDeclaringClass;<java.lang.invoke.BoundMethodHandle$Species_LL: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;43;isAccessible=false;
Field.getDeclaringClass;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;43;isAccessible=true;
Field.getModifiers;<java.awt.Component: sun.awt.AppContext appContext>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<java.awt.Component: sun.awt.AppContext appContext>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<java.awt.Component: sun.awt.AppContext appContext>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<java.awt.Component: sun.awt.AppContext appContext>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<java.awt.Component: sun.awt.AppContext appContext>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<java.awt.event.KeyEvent: int VK_ESCAPE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=false;
Field.getModifiers;<java.awt.event.KeyEvent: int VK_ESCAPE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=false;
Field.getModifiers;<java.awt.event.KeyEvent: int VK_ESCAPE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=false;
Field.getModifiers;<java.awt.event.KeyEvent: int VK_ESCAPE>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=false;
Field.getModifiers;<java.awt.event.KeyEvent: int VK_ESCAPE>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=false;
Field.getModifiers;<java.awt.event.KeyEvent: int VK_SPACE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=false;
Field.getModifiers;<java.awt.event.KeyEvent: int VK_SPACE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=false;
Field.getModifiers;<java.awt.event.KeyEvent: int VK_SPACE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=false;
Field.getModifiers;<java.awt.event.KeyEvent: int VK_SPACE>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=false;
Field.getModifiers;<java.awt.event.KeyEvent: int VK_SPACE>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_L3: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_L3: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_L3: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_L3: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_L3: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_L4: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_L4: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_L4: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_L4: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_L4: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_LL: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_LL: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_LL: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_LL: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_LL: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=false;
Field.getModifiers;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getName;<java.awt.Component: java.awt.Container parent>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.Component: java.awt.peer.ComponentPeer peer>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.Component: sun.awt.AppContext appContext>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.Component: sun.util.logging.PlatformLogger eventLog>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.Component: sun.util.logging.PlatformLogger focusLog>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.Component: sun.util.logging.PlatformLogger log>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.Component: sun.util.logging.PlatformLogger mixingLog>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.event.KeyEvent: int KEY_FIRST>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.event.KeyEvent: int KEY_LAST>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.event.KeyEvent: int KEY_PRESSED>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.event.KeyEvent: int KEY_RELEASED>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.event.KeyEvent: int KEY_TYPED>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.event.KeyEvent: int VK_ALT>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.event.KeyEvent: int VK_BACK_SPACE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.event.KeyEvent: int VK_CANCEL>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.event.KeyEvent: int VK_CAPS_LOCK>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.event.KeyEvent: int VK_CLEAR>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.event.KeyEvent: int VK_CONTROL>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.event.KeyEvent: int VK_ENTER>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.event.KeyEvent: int VK_ESCAPE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.event.KeyEvent: int VK_PAUSE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.event.KeyEvent: int VK_SHIFT>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.event.KeyEvent: int VK_SPACE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.event.KeyEvent: int VK_TAB>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: boolean daemon>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: boolean single_step>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: boolean stillborn>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: int MAX_PRIORITY>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: int MIN_PRIORITY>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: int NORM_PRIORITY>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: int priority>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: int threadInitNumber>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: int threadLocalRandomProbe>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: int threadLocalRandomSecondarySeed>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: int threadStatus>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: java.lang.ClassLoader contextClassLoader>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: java.lang.Object blockerLock>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: java.lang.Object parkBlocker>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: java.lang.Runnable target>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: java.lang.RuntimePermission SUBCLASS_IMPLEMENTATION_PERMISSION>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: java.lang.StackTraceElement[] EMPTY_STACK_TRACE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: java.lang.String name>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: java.lang.Thread threadQ>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler defaultUncaughtExceptionHandler>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler uncaughtExceptionHandler>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: java.lang.ThreadGroup group>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: java.lang.ThreadLocal$ThreadLocalMap inheritableThreadLocals>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: java.lang.ThreadLocal$ThreadLocalMap threadLocals>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: java.security.AccessControlContext inheritedAccessControlContext>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: long eetop>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: long nativeParkEventPointer>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: long stackSize>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: long threadLocalRandomSeed>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: long threadSeqNumber>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: long tid>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: sun.nio.ch.Interruptible blocker>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.invoke.BoundMethodHandle$Species_L3: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.invoke.BoundMethodHandle$Species_L4: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.invoke.BoundMethodHandle$Species_LL: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.invoke.CallSite: java.lang.invoke.MethodHandle target>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.invoke.MethodHandle: java.lang.invoke.LambdaForm form>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.invoke.MethodHandle: java.lang.invoke.MethodType type>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.invoke.MethodType: java.lang.Class rtype>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.invoke.MethodType: java.lang.Class[] ptypes>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.invoke.MethodType: long serialVersionUID>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.net.Inet6Address: int INADDRSZ>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.net.Inet6Address: int cached_scope_id>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.net.Inet6Address: java.net.Inet6Address$Inet6AddressHolder holder6>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.net.InetAddress: boolean preferIPv6Address>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.net.InetAddress: int IPv4>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.net.InetAddress: int IPv6>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.net.InetAddress: java.net.InetAddress$InetAddressHolder holder>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.Random: java.util.concurrent.atomic.AtomicLong seed>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.Random: long serialVersionUID>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.ConcurrentSkipListMap$Index: java.util.concurrent.ConcurrentSkipListMap$Index down>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.ConcurrentSkipListMap$Index: java.util.concurrent.ConcurrentSkipListMap$Index right>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.ConcurrentSkipListMap$Index: java.util.concurrent.ConcurrentSkipListMap$Node node>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object key>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object value>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.ConcurrentSkipListMap$Node: java.util.concurrent.ConcurrentSkipListMap$Node next>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.ConcurrentSkipListMap: java.lang.Object BASE_HEADER>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$HeadIndex head>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.ConcurrentSkipListMap: long serialVersionUID>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.ConcurrentSkipListSet: java.util.concurrent.ConcurrentNavigableMap m>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.ConcurrentSkipListSet: long serialVersionUID>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.atomic.AtomicBoolean: int value>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.atomic.AtomicBoolean: long serialVersionUID>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.atomic.AtomicBoolean: long valueOffset>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.atomic.AtomicBoolean: sun.misc.Unsafe unsafe>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int CANCELLED>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int CONDITION>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int PROPAGATE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int SIGNAL>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int waitStatus>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node EXCLUSIVE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node SHARED>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node next>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node prev>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer: int state>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node head>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node tail>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer: long serialVersionUID>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;java.lang.Class.searchFields;;isAccessible=false;
Field.set*;<java.awt.Component: sun.awt.AppContext appContext>;javax.swing.ImageIcon$1.run;110;isAccessible=true;
Field.set*;<java.lang.invoke.BoundMethodHandle$Species_L3: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;java.lang.invoke.BoundMethodHandle$Factory.setSpeciesDataToConcreteBMHClass;792;isAccessible=false;
Field.set*;<java.lang.invoke.BoundMethodHandle$Species_L4: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;java.lang.invoke.BoundMethodHandle$Factory.setSpeciesDataToConcreteBMHClass;792;isAccessible=false;
Field.set*;<java.lang.invoke.BoundMethodHandle$Species_LL: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;java.lang.invoke.BoundMethodHandle$Factory.setSpeciesDataToConcreteBMHClass;792;isAccessible=false;
Method.getDeclaringClass;<javax.swing.plaf.basic.BasicOptionPaneUI: javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)>;sun.reflect.misc.Trampoline.ensureInvocableMethod;60;isAccessible=false;
Method.getDeclaringClass;<javax.swing.plaf.basic.BasicPanelUI: javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)>;sun.reflect.misc.Trampoline.ensureInvocableMethod;60;isAccessible=false;
Method.getDeclaringClass;<javax.swing.plaf.metal.MetalButtonUI: javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)>;sun.reflect.misc.Trampoline.ensureInvocableMethod;60;isAccessible=false;
Method.getDeclaringClass;<javax.swing.plaf.metal.MetalLabelUI: javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)>;sun.reflect.misc.Trampoline.ensureInvocableMethod;60;isAccessible=false;
Method.getDeclaringClass;<sun.reflect.misc.Trampoline: java.lang.Object invoke(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>;sun.reflect.NativeMethodAccessorImpl.invoke;50;isAccessible=true;
Method.getDeclaringClass;<sun.reflect.misc.Trampoline: java.lang.Object invoke(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>;sun.reflect.NativeMethodAccessorImpl.invoke;53;isAccessible=true;
Method.getModifiers;<com.github.dcevm.installer.Main: void main(java.lang.String[])>;sun.launcher.LauncherHelper.validateMainClass;683;isAccessible=false;
Method.getModifiers;<sun.reflect.misc.Trampoline: java.lang.Object invoke(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>;sun.reflect.NativeMethodAccessorImpl.invoke;58;isAccessible=true;
Method.getName;<com.github.dcevm.installer.Main: void main(java.lang.String[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.github.dcevm.installer.MainWindow: javax.swing.JComponent getBanner()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.github.dcevm.installer.MainWindow: javax.swing.JComponent getBottomPanel()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.github.dcevm.installer.MainWindow: javax.swing.JComponent getCenterPanel()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.github.dcevm.installer.MainWindow: javax.swing.JComponent getChooserPanel()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.github.dcevm.installer.MainWindow: void showInstallerException(java.lang.Exception,java.awt.Component)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DelegatingMethodHandle: boolean isInvokeSpecial()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DelegatingMethodHandle: java.lang.Class internalCallerClass()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DelegatingMethodHandle: java.lang.String internalProperties()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DelegatingMethodHandle: java.lang.invoke.BoundMethodHandle rebind()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DelegatingMethodHandle: java.lang.invoke.LambdaForm chooseDelegatingForm(java.lang.invoke.MethodHandle)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DelegatingMethodHandle: java.lang.invoke.LambdaForm makeReinvokerForm(java.lang.invoke.MethodHandle,int,java.lang.Object,java.lang.String,boolean,java.lang.invoke.LambdaForm$NamedFunction,java.lang.invoke.LambdaForm$NamedFunction)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DelegatingMethodHandle: java.lang.invoke.LambdaForm makeReinvokerForm(java.lang.invoke.MethodHandle,int,java.lang.Object,java.lang.invoke.LambdaForm$NamedFunction)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DelegatingMethodHandle: java.lang.invoke.MemberName internalMemberName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DelegatingMethodHandle: java.lang.invoke.MethodHandle asTypeUncached(java.lang.invoke.MethodType)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DelegatingMethodHandle: java.lang.invoke.MethodHandle copyWith(java.lang.invoke.MethodType,java.lang.invoke.LambdaForm)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DelegatingMethodHandle: java.lang.invoke.MethodHandle getTarget()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DelegatingMethodHandle: java.lang.invoke.MethodHandle getTarget()>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle$Interface: java.lang.Object checkReceiver(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle$Interface: java.lang.Object checkReceiver(java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle$Interface: java.lang.Object internalProperties()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle$Interface: java.lang.invoke.MethodHandle copyWith(java.lang.invoke.MethodType,java.lang.invoke.LambdaForm)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: boolean checkInitialized(java.lang.invoke.MemberName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: boolean shouldBeInitialized(java.lang.invoke.MemberName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: int afIndex(byte,boolean,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: int ftypeKind(java.lang.Class)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object allocateInstance(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object allocateInstance(java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object checkBase(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object checkBase(java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object checkCast(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object checkCast(java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object checkCast(java.lang.Object,java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object constructorMethod(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object constructorMethod(java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object findDirectMethodHandle(java.lang.invoke.LambdaForm$Name)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object internalMemberName(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object internalMemberName(java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object internalMemberNameEnsureInit(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object internalMemberNameEnsureInit(java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object nullCheck(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object staticBase(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object staticBase(java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.String internalProperties()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.BoundMethodHandle rebind()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.DirectMethodHandle make(byte,java.lang.Class,java.lang.invoke.MemberName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.DirectMethodHandle make(java.lang.Class,java.lang.invoke.MemberName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.DirectMethodHandle make(java.lang.invoke.MemberName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.DirectMethodHandle make(java.lang.reflect.Field)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.DirectMethodHandle make(java.lang.reflect.Method)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.DirectMethodHandle makeAllocator(java.lang.invoke.MemberName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.LambdaForm makePreparedFieldLambdaForm(byte,boolean,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.LambdaForm makePreparedLambdaForm(java.lang.invoke.MethodType,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.LambdaForm preparedFieldLambdaForm(byte,boolean,java.lang.Class)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.LambdaForm preparedFieldLambdaForm(java.lang.invoke.MemberName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.LambdaForm preparedLambdaForm(java.lang.invoke.MemberName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.LambdaForm preparedLambdaForm(java.lang.invoke.MethodType,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.MemberName internalMemberName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.MethodHandle copyWith(java.lang.invoke.MethodType,java.lang.invoke.LambdaForm)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: long fieldOffset(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: long fieldOffset(java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: long staticOffset(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: long staticOffset(java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: void ensureInitialized()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: void ensureInitialized(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: void ensureInitialized(java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: void maybeCompile(java.lang.invoke.LambdaForm,java.lang.invoke.MemberName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: boolean checkInvoker(java.lang.invoke.MethodHandle)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.Class impliedRestargType(java.lang.invoke.MethodType,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.Object checkGenericType(java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.Object checkGenericType(java.lang.Object,java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.Object getCallSiteTarget(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.Object getCallSiteTarget(java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.String toString()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.LambdaForm callSiteForm(java.lang.invoke.MethodType,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.LambdaForm invokeHandleForm(java.lang.invoke.MethodType,boolean,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.MemberName invokeBasicMethod(java.lang.invoke.MethodType)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.MemberName linkToCallSiteMethod(java.lang.invoke.MethodType)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.MemberName linkToTargetMethod(java.lang.invoke.MethodType)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.MemberName methodHandleInvokeLinkerMethod(java.lang.String,java.lang.invoke.MethodType,java.lang.Object[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.MethodHandle basicInvoker()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.MethodHandle cachedInvoker(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.MethodHandle exactInvoker()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.MethodHandle genericInvoker()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.MethodHandle makeExactOrGeneralInvoker(boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.MethodHandle setCachedInvoker(int,java.lang.invoke.MethodHandle)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.MethodHandle spreadInvoker(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.WrongMethodTypeException newWrongMethodTypeException(java.lang.invoke.MethodType,java.lang.invoke.MethodType)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: void checkCustomized(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: void checkCustomized(java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: void checkExactType(java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: void checkExactType(java.lang.Object,java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: void maybeCompileToBytecode(java.lang.invoke.MethodHandle)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: void maybeCustomize(java.lang.invoke.MethodHandle)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: boolean assertCorrectArity(java.lang.invoke.MethodHandle,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: boolean profileBoolean(boolean,int[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: boolean profileBoolean(boolean,int[])>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: int countNonNull(java.lang.Object[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.ClassCastException newClassCastException(java.lang.Class,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object castReference(java.lang.Class,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object copyAsPrimitiveArray(sun.invoke.util.Wrapper,java.lang.Object[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object guardWithCatch(java.lang.invoke.MethodHandle,java.lang.Class,java.lang.invoke.MethodHandle,java.lang.Object[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object guardWithCatch(java.lang.invoke.MethodHandle,java.lang.Class,java.lang.invoke.MethodHandle,java.lang.Object[])>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object valueConversion(java.lang.Class,java.lang.Class,boolean,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] array()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] array(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] array(java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] array(java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] array(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] array(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] array(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] array(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] array(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] array(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] array(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] computeValueConversions(java.lang.invoke.MethodType,java.lang.invoke.MethodType,boolean,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] fillArray(java.lang.Integer,java.lang.Object[],java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] fillArray(java.lang.Integer,java.lang.Object[],java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] fillArray(java.lang.Integer,java.lang.Object[],java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] fillArray(java.lang.Integer,java.lang.Object[],java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] fillArray(java.lang.Integer,java.lang.Object[],java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] fillArray(java.lang.Integer,java.lang.Object[],java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] fillArray(java.lang.Integer,java.lang.Object[],java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] fillArray(java.lang.Integer,java.lang.Object[],java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] fillArray(java.lang.Integer,java.lang.Object[],java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] fillArray(java.lang.Integer,java.lang.Object[],java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] fillNewArray(java.lang.Integer,java.lang.Object[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] fillNewTypedArray(java.lang.Object[],java.lang.Integer,java.lang.Object[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] identity(java.lang.Object[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] makeArray(java.lang.Object[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] prepend(java.lang.Object,java.lang.Object[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.LambdaForm makeGuardWithCatchForm(java.lang.invoke.MethodType)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.LambdaForm makeGuardWithTestForm(java.lang.invoke.MethodType)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle bindCaller(java.lang.invoke.MethodHandle,java.lang.Class)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle buildArrayProducer(java.lang.Class)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle buildFiller(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle buildVarargsArray(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle fakeMethodHandleInvoke(java.lang.invoke.MemberName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle fillToRight(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle findCollector(java.lang.String,int,java.lang.Class,java.lang.Class[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makeArrayElementAccessor(java.lang.Class,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makeBlockInlningWrapper(java.lang.invoke.MethodHandle)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makeCollectArguments(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,int,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makeGuardWithCatch(java.lang.invoke.MethodHandle,java.lang.Class,java.lang.invoke.MethodHandle)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makeGuardWithTest(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makeIntrinsic(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandleImpl$Intrinsic)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makeIntrinsic(java.lang.invoke.MethodType,java.lang.invoke.LambdaForm,java.lang.invoke.MethodHandleImpl$Intrinsic)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makePairwiseConvert(java.lang.invoke.MethodHandle,java.lang.invoke.MethodType,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makePairwiseConvert(java.lang.invoke.MethodHandle,java.lang.invoke.MethodType,boolean,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makePairwiseConvertByEditor(java.lang.invoke.MethodHandle,java.lang.invoke.MethodType,boolean,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makePairwiseConvertIndirect(java.lang.invoke.MethodHandle,java.lang.invoke.MethodType,boolean,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makeSpreadArguments(java.lang.invoke.MethodHandle,java.lang.Class,int,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makeVarargsCollector(java.lang.invoke.MethodHandle,java.lang.Class)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makeWrappedMember(java.lang.invoke.MethodHandle,java.lang.invoke.MemberName,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle profile(java.lang.invoke.MethodHandle)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle selectAlternative(boolean,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle throwException(java.lang.invoke.MethodType)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle varargsArray(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle varargsArray(java.lang.Class,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle[] access$000()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle[] access$100()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle[] makeArrays()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle[] makeFillArrays()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: sun.invoke.empty.Empty throwException(java.lang.Throwable)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: sun.invoke.empty.Empty throwException(java.lang.Throwable)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: void assertSame(java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: void checkSpreadArgument(java.lang.Object,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: void checkSpreadArgument(java.lang.Object,int)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: void fillWithArguments(java.lang.Object[],int,java.lang.Object[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: void initStatics()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.swing.plaf.basic.BasicOptionPaneUI: boolean containsCustomComponents(javax.swing.JOptionPane)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.swing.plaf.basic.BasicOptionPaneUI: java.awt.Dimension getMinimumOptionPaneSize()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.swing.plaf.basic.BasicOptionPaneUI: java.awt.Dimension getPreferredSize(javax.swing.JComponent)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.swing.plaf.basic.BasicOptionPaneUI: javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.swing.plaf.basic.BasicOptionPaneUI: void installUI(javax.swing.JComponent)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.swing.plaf.basic.BasicOptionPaneUI: void selectInitialValue(javax.swing.JOptionPane)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.swing.plaf.basic.BasicOptionPaneUI: void uninstallUI(javax.swing.JComponent)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.swing.plaf.basic.BasicPanelUI: int getBaseline(javax.swing.JComponent,int,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.swing.plaf.basic.BasicPanelUI: java.awt.Component$BaselineResizeBehavior getBaselineResizeBehavior(javax.swing.JComponent)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.swing.plaf.basic.BasicPanelUI: javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.swing.plaf.basic.BasicPanelUI: void installUI(javax.swing.JComponent)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.swing.plaf.basic.BasicPanelUI: void uninstallUI(javax.swing.JComponent)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.swing.plaf.metal.MetalBorders: javax.swing.border.Border getButtonBorder()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.swing.plaf.metal.MetalBorders: javax.swing.border.Border getDesktopIconBorder()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.swing.plaf.metal.MetalBorders: javax.swing.border.Border getTextBorder()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.swing.plaf.metal.MetalBorders: javax.swing.border.Border getTextFieldBorder()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.swing.plaf.metal.MetalBorders: javax.swing.border.Border getToggleButtonBorder()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.swing.plaf.metal.MetalButtonUI: javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.swing.plaf.metal.MetalButtonUI: void installDefaults(javax.swing.AbstractButton)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.swing.plaf.metal.MetalButtonUI: void uninstallDefaults(javax.swing.AbstractButton)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.swing.plaf.metal.MetalButtonUI: void update(java.awt.Graphics,javax.swing.JComponent)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.swing.plaf.metal.MetalLabelUI: javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<sun.font.EAttribute: java.lang.String toString()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<sun.font.EAttribute: sun.font.EAttribute forAttribute(java.text.AttributedCharacterIterator$Attribute)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<sun.font.EAttribute: sun.font.EAttribute valueOf(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<sun.font.EAttribute: sun.font.EAttribute[] values()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<sun.reflect.misc.Trampoline: java.lang.Object invoke(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<sun.reflect.misc.Trampoline: java.lang.Object invoke(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>;sun.reflect.NativeMethodAccessorImpl.invoke;54;isAccessible=true;
Method.getName;<sun.reflect.misc.Trampoline: void ensureInvocableMethod(java.lang.reflect.Method)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.invoke;<javax.swing.plaf.basic.BasicOptionPaneUI: javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)>;sun.reflect.misc.Trampoline.invoke;72;isAccessible=false;
Method.invoke;<javax.swing.plaf.basic.BasicPanelUI: javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)>;sun.reflect.misc.Trampoline.invoke;72;isAccessible=false;
Method.invoke;<javax.swing.plaf.metal.MetalBorders: javax.swing.border.Border getButtonBorder()>;sun.swing.SwingLazyValue.createValue;73;isAccessible=true;
Method.invoke;<javax.swing.plaf.metal.MetalButtonUI: javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)>;sun.reflect.misc.Trampoline.invoke;72;isAccessible=false;
Method.invoke;<javax.swing.plaf.metal.MetalLabelUI: javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)>;sun.reflect.misc.Trampoline.invoke;72;isAccessible=false;
Method.invoke;<sun.font.EAttribute: sun.font.EAttribute[] values()>;java.lang.Class.getEnumConstantsShared;;isAccessible=true;
Method.invoke;<sun.reflect.misc.Trampoline: java.lang.Object invoke(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>;sun.reflect.misc.MethodUtil.invoke;276;isAccessible=true;
